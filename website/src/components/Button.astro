---
export interface Props {
  class?: string;
  as?: keyof HTMLElementTagNameMap;
  size?: "md" | "icon";
  color?: "primary" | "secondary";
  shadow?: boolean;
  [key: string]: any;
}

const {
  class: className = "",
  as: Tag = "button",
  size = "md",
  color = "primary",
  shadow = true,
  ...props
} = Astro.props;
---

<Tag
  class:list={[
    "group button-animated-bg relative flex h-[52px] items-center justify-center overflow-hidden outline-none",
    className,
  ]}
  {...props}
>
  <div
    class:list={[
      "z-[1] flex h-full items-center justify-center transition-transform duration-150",
      shadow && "group-hover:translate-x-[5px] group-hover:translate-y-[5px]",
    ]}
  >
    <div
      class="h-[calc(100%-10px)] w-[5px] bg-black group-focus-visible:h-full"
    >
    </div>
    <div
      class:list={[
        "t-lg button-animated-bg flex h-full items-center justify-center gap-2 border-y-5 border-y-black",
        color === "primary" ? "bg-blue text-white" : "bg-white text-black",
        size === "icon"
          ? "max-w-[42px] overflow-hidden px-2 py-2"
          : "w-[unset] px-3 py-[7px] sm:px-5",
      ]}
    >
      <slot />
    </div>
    <div
      class="h-[calc(100%-10px)] w-[5px] bg-black group-focus-visible:h-full"
    >
    </div>
  </div>

  {
    shadow && (
      <>
        <div class="absolute top-[10px] right-[-5px] h-[calc(100%-10px)] w-[10px] bg-black" />
        <div class="absolute bottom-[-5px] left-[10px] h-[10px] w-[calc(100%-10px)] bg-black" />
      </>
    )
  }
</Tag>
