---
import ChevronDown from "@lucide/astro/icons/chevron-down";
import Box from "./Box.astro";

interface Props {
  title: string;
  details: string;
}

const { title, details } = Astro.props as Props;
---

<Box shadow>
  <div class="accordion group relative w-[550px]">
    <button
      class="accordion__button bg-green flex w-full flex-1 items-center justify-between gap-2.5 p-5 transition"
      type="button"
      id={`${title} accordion menu button`}
      aria-expanded="false"
      aria-controls={`${title} accordion menu content`}
    >
      <h4 class="text-h4">{title}</h4>

      <ChevronDown
        class="accordion__chevron h-7 w-7 shrink-0 transition-transform"
      />
    </button>

    <div
      id={`${title} accordion menu content`}
      aria-labelledby={`${title} accordion menu button`}
      class="accordion__content hidden max-h-0 overflow-hidden bg-white transition-all duration-300 ease-in-out"
    >
      <p
        class="prose max-w-full border-t-5 border-t-black p-5 text-left text-lg text-black transition-[height]"
      >
        {details}
      </p>
    </div>
  </div>
</Box>

<script>
  function accordionSetup() {
    const accordionMenus = document.querySelectorAll(
      ".accordion"
    ) as NodeListOf<HTMLElement>;
    accordionMenus.forEach((accordionMenu) => {
      const accordionButton = accordionMenu.querySelector(
        ".accordion__button"
      ) as HTMLElement;
      const accordionChevron = accordionMenu.querySelector(
        ".accordion__chevron"
      ) as HTMLElement;
      const accordionContent = accordionMenu.querySelector(
        ".accordion__content"
      ) as HTMLElement;

      if (accordionButton && accordionContent && accordionChevron) {
        accordionButton.addEventListener("click", (event) => {
          if (!accordionMenu.classList.contains("active")) {
            // if accordion is currently closed, so open it
            accordionMenu.classList.add("active");
            accordionButton.setAttribute("aria-expanded", "true");

            // set max-height to the height of the accordion content
            // this makes it animate properly
            accordionContent.classList.remove("hidden");
            accordionContent.style.maxHeight =
              accordionContent.scrollHeight + "px";
            accordionChevron.classList.add("rotate-180");
          } else {
            // accordion is currently open, so close it
            accordionMenu.classList.remove("active");
            accordionButton.setAttribute("aria-expanded", "false");

            // set max-height to the height of the accordion content
            // this makes it animate properly
            accordionContent.style.maxHeight = "0px";
            accordionChevron.classList.remove("rotate-180");
            // delay to allow close animation
            setTimeout(() => {
              accordionContent.classList.add("hidden");
            }, 300);
          }
          event.preventDefault();
          return false;
        });
      }
    });
  }

  // runs on initial page load
  accordionSetup();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", accordionSetup);
</script>
