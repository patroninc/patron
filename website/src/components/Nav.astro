---
import invariant from "tiny-invariant";
import { keystatic } from "@lib/keystatic/client";
import Button from "./Button.astro";
import ArrowRight from "@lucide/astro/icons/arrow-right";
import Menu from "@lucide/astro/icons/menu";
import X from "@lucide/astro/icons/x";
import Link from "./Link.astro";
import KeystaticImage from "./KeystaticImage.astro";
import { Icon } from "astro-icon/components";

const i18n = await keystatic.singletons.nav.read({
  resolveLinkedFiles: true,
});
invariant(i18n, "No homepage content found");

const currentPath = Astro.url.pathname;
const isBlogPath = currentPath.startsWith("/blog");
const positionClass = isBlogPath ? "absolute" : "fixed";
---

<div class={`px-base ${positionClass} top-[15px] right-0 left-0 z-50`}>
  <div
    class="max-w-container mx-auto flex h-20 w-full items-center justify-between sm:h-[90px]"
  >
    <div class="flex h-full w-[10px] items-center justify-center">
      <div class="h-full max-h-[calc(100%-20px)] w-[5px] bg-black"></div>
      <div
        class="h-full max-h-[calc(100%-10px)] w-[5px] border-y-5 border-y-black bg-white"
      >
      </div>
    </div>
    <nav
      class="flex h-full w-full items-center justify-between border-y-5 border-y-black bg-white p-[10px] sm:p-[15px] sm:px-[20px]"
    >
      <div class="flex items-center justify-between gap-14">
        <div>
          <a href={i18n.logo.href} aria-label="Go to homepage">
            <KeystaticImage
              src={i18n.logo.image}
              alt={i18n.logo.alt ?? ""}
              class="h-[40px] sm:h-[50px]"
            />
          </a>
        </div>

        <!-- Desktop Navigation Links -->
        <div class="hidden items-center space-x-[50px] sm:flex">
          {
            i18n.navigationLinks.map((link) => (
              <Link
                href={link.href}
                target={link.newTab ? "_blank" : undefined}
                rel={link.newTab ? "noopener noreferrer" : undefined}
                class="text-lg font-semibold"
              >
                {link.label}
              </Link>
            ))
          }
        </div>
      </div>

      <!-- Desktop CTA + GitHub Button + Mobile Menu Button -->
      <div class="flex items-center gap-3 sm:gap-4" transition:persist>
        <!-- GitHub Button -->
        <Button
          href="https://github.com/patroninc/patron"
          as="a"
          color="secondary"
          target="_blank"
          rel="noopener noreferrer"
          shadow={false}
          class="w-max"
        >
          <Icon name="simple-icons:github" class="size-5 sm:size-6" />
          <span id="star-count">
            <span
              class="skeleton-loader inline-block h-4 w-5 animate-pulse rounded bg-gray-300"
            ></span>
          </span>
        </Button>

        <!-- Mobile Menu Button -->
        <Button
          color="secondary"
          shadow={false}
          id="mobile-menu-button"
          class="flex items-center justify-center sm:hidden"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
        >
          <Menu id="menu-icon" class="h-6 w-6" />
          <X id="close-icon" class="hidden h-6 w-6" />
        </Button>

        <!-- Desktop CTA Button (hidden on mobile) -->
        {
          i18n.ctaButton.enabled && (
            <Button
              shadow={false}
              as="button"
              type="button"
              id="nav-cta-button"
              class="hidden cursor-pointer sm:flex"
            >
              {i18n.ctaButton.label}
              <ArrowRight />
            </Button>
          )
        }
      </div>
    </nav>
    <div class="flex h-full w-[10px] items-center justify-center">
      <div
        class="h-full max-h-[calc(100%-10px)] w-[5px] border-y-5 border-y-black bg-white"
      >
      </div>
      <div class="h-full max-h-[calc(100%-20px)] w-[5px] bg-black"></div>
    </div>
  </div>
</div>
<!-- Mobile Menu Overlay -->
<div
  id="mobile-menu"
  class="fixed inset-0 z-[55] hidden bg-black/50 lg:hidden"
  aria-hidden="true"
  transition:persist
>
  <div
    class="bg-green fixed top-0 right-0 h-full w-[250px] translate-x-full transform border-l-5 border-l-black transition-transform duration-300 ease-in-out"
  >
    <div class="flex h-full flex-col">
      <!-- Mobile menu header -->
      <div class="flex items-center justify-end p-5">
        <Button
          color="secondary"
          shadow={false}
          id="mobile-menu-close"
          class="flex items-center justify-center"
          aria-label="Close mobile menu"
        >
          <X class="h-6 w-6" />
        </Button>
      </div>

      <!-- Mobile navigation links -->
      <div class="flex-1 p-5">
        <nav class="flex flex-col items-center space-y-4">
          {
            i18n.navigationLinks.map((link) => (
              <Link
                href={link.href}
                target={link.newTab ? "_blank" : undefined}
                rel={link.newTab ? "noopener noreferrer" : undefined}
                class="t-2xl py-3"
              >
                {link.label}
              </Link>
            ))
          }
        </nav>
      </div>

      <!-- Mobile CTA Button at bottom -->
      {
        i18n.ctaButton.enabled && (
          <div class="flex items-center justify-center p-5">
            <Button
              shadow={false}
              as="button"
              type="button"
              id="mobile-nav-cta-button"
            >
              {i18n.ctaButton.label}
              <ArrowRight />
            </Button>
          </div>
        )
      }
    </div>
  </div>
</div>

<script>
  const navCtaButton = document.getElementById("nav-cta-button");
  const mobileNavCtaButton = document.getElementById("mobile-nav-cta-button");

  // Mobile menu functionality
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const mobileMenuClose = document.getElementById("mobile-menu-close");
  const menuIcon = document.getElementById("menu-icon");
  const closeIcon = document.getElementById("close-icon");
  const mobileNavLinks = document.querySelectorAll(".mobile-nav-link");

  function openMobileMenu() {
    if (mobileMenu) {
      mobileMenu.classList.remove("hidden");
      mobileMenu.setAttribute("aria-hidden", "false");
      const menuPanel = mobileMenu.querySelector("div");
      if (menuPanel) {
        setTimeout(() => {
          menuPanel.classList.remove("translate-x-full");
        }, 10);
      }
      document.body.style.overflow = "hidden";

      if (mobileMenuButton) {
        mobileMenuButton.setAttribute("aria-expanded", "true");
      }
      if (menuIcon) menuIcon.classList.add("hidden");
      if (closeIcon) closeIcon.classList.remove("hidden");
    }
  }

  function closeMobileMenu() {
    if (mobileMenu) {
      const menuPanel = mobileMenu.querySelector("div");
      if (menuPanel) {
        menuPanel.classList.add("translate-x-full");
        setTimeout(() => {
          mobileMenu.classList.add("hidden");
          mobileMenu.setAttribute("aria-hidden", "true");
        }, 300);
      }
      document.body.style.overflow = "";

      if (mobileMenuButton) {
        mobileMenuButton.setAttribute("aria-expanded", "false");
      }
      if (menuIcon) menuIcon.classList.remove("hidden");
      if (closeIcon) closeIcon.classList.add("hidden");
    }
  }

  if (mobileMenuButton) {
    mobileMenuButton.addEventListener("click", () => {
      const isExpanded =
        mobileMenuButton.getAttribute("aria-expanded") === "true";
      if (isExpanded) {
        closeMobileMenu();
      } else {
        openMobileMenu();
      }
    });
  }

  if (mobileMenuClose) {
    mobileMenuClose.addEventListener("click", closeMobileMenu);
  }

  // Close mobile menu when clicking overlay
  if (mobileMenu) {
    mobileMenu.addEventListener("click", (e) => {
      if (e.target === mobileMenu) {
        closeMobileMenu();
      }
    });
  }

  // Close mobile menu when clicking nav links
  mobileNavLinks.forEach((link) => {
    link.addEventListener("click", closeMobileMenu);
  });

  // Close mobile menu on escape key
  document.addEventListener("keydown", (e) => {
    if (
      e.key === "Escape" &&
      mobileMenu &&
      !mobileMenu.classList.contains("hidden")
    ) {
      closeMobileMenu();
    }
  });

  function getPageY(el: Element) {
    const rect = el.getBoundingClientRect();
    return rect.top + window.scrollY + rect.height / 2;
  }

  function findNearestEmailInput(): HTMLInputElement | null {
    const hero = document.getElementById(
      "waitlist-email-hero",
    ) as HTMLInputElement | null;
    let footer = document.getElementById("waitlist") as HTMLInputElement | null;

    // Fallback in case the footer input doesn't have the expected ID
    if (!footer) {
      footer = document.querySelector(
        'form#end-cta input[type="email"]',
      ) as HTMLInputElement | null;
    }

    const candidates = [hero, footer].filter(Boolean) as HTMLInputElement[];
    if (candidates.length === 0) return null;

    const currentY = window.scrollY + window.innerHeight / 2;
    let nearest = candidates[0];
    let minDist = Math.abs(getPageY(nearest) - currentY);

    for (let i = 1; i < candidates.length; i++) {
      const d = Math.abs(getPageY(candidates[i]) - currentY);
      if (d < minDist) {
        minDist = d;
        nearest = candidates[i];
      }
    }
    return nearest;
  }

  function handleCtaClick() {
    const targetInput = findNearestEmailInput();

    if (targetInput) {
      targetInput.scrollIntoView({ behavior: "smooth", block: "center" });
      setTimeout(() => targetInput.focus(), 600);
      return;
    }
  }

  if (navCtaButton) {
    navCtaButton.addEventListener("click", handleCtaClick);
  }

  if (mobileNavCtaButton) {
    mobileNavCtaButton.addEventListener("click", () => {
      closeMobileMenu();
      handleCtaClick();
    });
  }

  async function fetchGitHubStars() {
    try {
      const response = await fetch(
        "https://api.github.com/repos/patroninc/patron",
        {
          headers: {
            Accept: "application/vnd.github+json",
          },
        },
      );
      if (response.ok) {
        const data = await response.json();
        const starCount = data.stargazers_count;

        const formatStarCount = (count: number): string => {
          if (count >= 1000) {
            return (count / 1000).toFixed(1).replace(/\.0$/, "") + "k";
          }
          return count.toString();
        };

        const starCountElement = document.getElementById("star-count");
        if (starCountElement) {
          starCountElement.textContent = formatStarCount(starCount);
        }
      }
    } catch (error) {
      console.error("Failed to fetch GitHub star count:", error);
      const starCountElement = document.getElementById("star-count");
      if (starCountElement) {
        starCountElement.textContent = "★";
      }
    }
  }

  fetchGitHubStars();
</script>
