---
import EndCtaGrid from "@components/EndCtaGrid.astro";
import Box from "@components/Box.astro";
import Check from "@lucide/astro/icons/check";
import ArrowRight from "@lucide/astro/icons/arrow-right";
import Input from "./Input.astro";
import button from "./Button.astro";

const { cta } = Astro.props;
---

<section
  id="waitlist"
  class="b1100:px-20 relative w-full scroll-mt-[120px] overflow-hidden border-y-[10px] border-y-black bg-black px-0 py-[80px] sm:px-5 sm:py-[100px] md:px-10"
>
  <EndCtaGrid />
  <div class="container-content">
    <Box color="white" class="mx-auto w-full lg:mx-[unset] lg:w-max">
      <div
        class="flex w-full flex-col items-center justify-center gap-[60px] bg-black p-5 py-10 text-center sm:p-10 sm:py-10 lg:w-max lg:items-start lg:text-left"
      >
        <h2 class="w-full text-white lg:w-[700px]">
          {cta.title}
        </h2>
        <p class="t-2xl relative w-full text-white lg:w-[716px]">
          {cta.description}
        </p>
        <form
          id="end-cta"
          class="relative flex h-[60px] w-full items-center justify-between gap-[5px] sm:w-auto"
        >
          <div class="relative h-full w-full sm:w-max">
            <Box color="white" class="h-full w-full sm:w-max">
              <input
                id="waitlist-email-footer"
                placeholder={cta.emailPlaceholder}
                type="email"
                required
                class="peer t-xl h-full w-full bg-white px-[15px] py-[5px] outline-none sm:w-[400px]"
              />
            </Box>
          </div>
          <div class="relative h-full w-max shrink-0 overflow-hidden">
            <Box color="blue" class="relative h-full w-max">
              <div
                class="success-message bg-orange absolute -top-[65px] -left-[5px] z-10 flex size-[60px] items-center justify-center transition-all duration-300 ease-in-out select-none"
              >
                <Check class="size-[34px]" />
              </div>
              <button
                color="secondary"
                aria-label="Join the waitlist"
                class="bg-blue flex size-[50px] items-center justify-center outline-none cursor-pointer button-animated-bg"
              >
                <ArrowRight class="size-[34px]" color="white" />
              </button>
            </Box>
          </div>
        </form>
      </div>
    </Box>
  </div>
</section>

<script>
  const endCtaForm = document.querySelector("form#end-cta");
  const endCtaInput = document.querySelector(
    'form#end-cta input[type="email"]',
  ) as HTMLInputElement | null;
  const endCtaButton = document.querySelector(
    "form#end-cta button",
  ) as HTMLButtonElement | null;

  function extractNameFromEmail(email: string): string {
    const localPart = email.split("@")[0];

    const cleanName = localPart
      .replace(/[._-]/g, " ")
      .replace(/\d+/g, "")
      .trim();

    return (
      cleanName
        .split(" ")
        .map(
          (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(),
        )
        .join(" ") || "Subscriber"
    );
  }

  async function subscribeToMailingList(email: string): Promise<boolean> {
    try {
      const name = extractNameFromEmail(email);

      const response = await fetch(
        "https://listmonk.skeptrune.com/api/public/subscription",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            email: email,
            name: name,
            list_uuids: ["44d290b4-8710-4369-a8ff-c1b65adc75ca"],
          }),
        },
      );

      if (response.ok) {
        await sendWelcomeEmail(email);
        return true;
      }

      return false;
    } catch (error) {
      console.error("Failed to subscribe:", error);
      return false;
    }
  }

  async function sendWelcomeEmail(email: string): Promise<void> {
    try {
      const response = await fetch("https://listmonk.skeptrune.com/api/tx", {
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          Authorization:
            "Basic " +
            btoa(
              `${import.meta.env.PUBLIC_LISTMONK_API_USER}:${import.meta.env.PUBLIC_LISTMONK_API_KEY}`,
            ),
        },
        body: JSON.stringify({
          subscriber_email: email,
          template_id: 3,
          content_type: "html",
          from_email: "nick.k@patron.com",
        }),
      });

      if (!response.ok) {
        console.error("Failed to send welcome email:", response.statusText);
      }
    } catch (error) {
      console.error("Error sending welcome email:", error);
    }
  }

  endCtaInput?.addEventListener("focus", () => {
    const parent = endCtaInput?.parentElement;
    if (parent) {
      parent.classList.remove("white-border-md");
      parent.classList.add("white-border");
    }
  });

  endCtaInput?.addEventListener("blur", () => {
    const parent = endCtaInput?.parentElement;
    if (parent) {
      parent.classList.remove("white-border");
      parent.classList.add("white-border-md");
    }
  });

  endCtaButton?.addEventListener("focus", () => {
    const parent = endCtaButton?.parentElement;
    if (parent) {
      parent.classList.remove("blue-border-md");
      parent.classList.add("blue-border");
    }
  });

  endCtaButton?.addEventListener("blur", () => {
    const parent = endCtaButton?.parentElement;
    if (parent) {
      parent.classList.remove("blue-border");
      parent.classList.add("blue-border-md");
    }
  });

  if (endCtaForm) {
    endCtaForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const successMessage = endCtaForm.querySelector(
        "form#end-cta .success-message",
      ) as HTMLDivElement | null;

      if (endCtaInput && endCtaInput.value) {
        const success = await subscribeToMailingList(endCtaInput.value);

        if (success) {
          successMessage?.classList.add("top-[-5px]");
          successMessage?.classList.remove("top-[-60px]");

          endCtaInput.value = "";
        } else {
          console.error("Subscription failed");
        }
      }
    });
  }
</script>
