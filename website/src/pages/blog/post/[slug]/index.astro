---
import Layout from "@layouts/Layout.astro";
import { getCollection, render } from "astro:content";
import Box from "@components/Box.astro";
import YoutubeEmbed from "@components/blog/YoutubeEmbed.astro";
import VimeoEmbed from "@components/blog/VimeoEmbed.astro";
import Info from "@components/blog/Info.astro";
import Warning from "@components/blog/Warning.astro";
import TextBoxLearnMore from "@components/blog/TextBoxLearnMore.astro";
import TextBox from "@components/blog/TextBox.astro";

export async function getStaticPaths() {
  const entries = await getCollection("blogPosts");
  return entries.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const categories = await getCollection("blogCategories");
const site = Astro.site;

const { entry } = Astro.props;
const { Content, headings } = await render(entry);

const i18n = entry.data;
const ogImage = new URL(i18n.coverImage.src, site).href;
---

<Layout
  title={`${i18n.title} - Patron Blog`}
  ogTitle={`${i18n.title} - Patron Blog`}
  description={i18n.summary}
  ogDescription={i18n.summary}
  ogImage={ogImage}
  hideMovingBackground
  ogType="article"
  articlePublishedTime={i18n.createdAt?.toISOString()}
  articleModifiedTime={i18n.lastUpdatedAt?.toISOString()}
  articleAuthors={i18n.author ? [i18n.author] : []}
  articleSection={i18n.ogSection ?? "Technology"}
  articleTags={i18n.categories}
>
  <section
    class="bg-green cube-bg px-base mx-auto pt-[150px] pb-[80px] sm:pt-[200px] sm:pb-[160px]"
  >
    <div class="mx-auto flex w-full max-w-[1100px] flex-col">
      <div class="text-center">
        <h1>{i18n.title}</h1>
      </div>
      <div
        class="t-lg mt-10 mb-16 flex w-full items-center justify-between gap-4"
      >
        {
          (i18n.author || i18n.lastUpdatedAt || i18n.createdAt) && (
            <div class="flex flex-wrap items-center gap-2">
              {i18n.author && <span>{`Written by ${i18n.author}`}</span>}
              {(i18n.lastUpdatedAt || i18n.createdAt) && (
                <>
                  <span class="mx-1">â€¢</span>
                  <span>
                    {(i18n.lastUpdatedAt ? i18n.lastUpdatedAt : i18n.createdAt)
                      ? (i18n.lastUpdatedAt
                          ? i18n.lastUpdatedAt
                          : i18n.createdAt
                        )?.toLocaleDateString("en-US", {
                          month: "short",
                          day: "numeric",
                          year: "numeric",
                        })
                      : ""}
                  </span>
                </>
              )}
            </div>
          )
        }

        <div class="flex flex-row gap-5">
          {
            i18n.categories.map((postCategory) => (
              <a href={`/blog/category/${postCategory}`} class="">
                <Box>
                  <div class="t-sm bg-white px-3 py-1.5">
                    {categories.find((c) => c.id === postCategory)?.data.name}
                  </div>
                </Box>
              </a>
            ))
          }
        </div>
      </div>
      <article class="content text-lg">
        <Content
          components={{
            YoutubeEmbed,
            VimeoEmbed,
            Info,
            Warning,
            TextBoxLearnMore,
            TextBox,
          }}
        />
      </article>
    </div>
  </section>
</Layout>

<style lang="postcss" >
.content {
  display: flex;
  flex-direction: column;
  gap: 2rem;

  h2 {
    &:not(:first-child) {
      margin: 1rem 0 1rem;
    }
  }

  code:not(pre code) {
    border: 2px solid rgb(0, 0, 0);
    background-color: white;
    padding: 2px 6px;
    border-radius: 0px;
  }

  h3 {
    &:not(:first-child) {
      margin: 1rem 0 0;
    }
  }

  ol {
    list-style: decimal inside;
    padding-left: 1.2rem;
    
    li {
      margin-bottom: 1rem;
      &::marker {
        font-weight: bold;
      }
    }
  }

  ul {
    list-style: disc inside;
    padding-left: 1.2rem;

    li {
      margin-bottom: 1rem;
      &::marker {
        font-weight: bold;
      }
    }
  }

  a {
    text-decoration: underline;
    font-weight: 500;
    color: var(--color-primary-500);
    &:visited {
      color: var(--color-primary-700);
    }
  }

  pre {
    padding: 1rem;
  }

  img,pre {
    border-radius: 0px;
    border: 5px solid rgb(0, 0, 0);
  }

  table {
    tr {
      border-bottom: 1px solid black;

      td {
        padding: 0.5rem 1rem;
        &:first-child {
          font-weight: 600;
        }

        a {
          word-break: unset;
        }
      }
    }

    tr:has(td:empty + td:not(:empty) + td:empty) {       
      td {
        padding: 1.5rem 0;
        text-align: center;
        vertical-align: middle;
      }
    }
  }
}
</style>
