---
import Layout from "@layouts/Layout.astro";
import { keystatic } from "@lib/keystatic/client";
import invariant from "tiny-invariant";
import { marked } from "marked";

import Star1 from "@components/icons/Star1.astro";
import Box from "@components/Box.astro";
import Oss from "@components/icons/Oss.astro";
import Percent from "@components/icons/Percent.astro";
import Heart from "@components/icons/Heart.astro";
import Accordion from "@components/Accordion.astro";
import Marquee from "@components/Marquee.astro";
import Star5 from "@components/icons/Star5.astro";
import Steps from "@components/Steps.astro";
import Testimonial from "@components/Testimonial.astro";
import Star2 from "@components/icons/Star2.astro";
import Star3 from "@components/icons/Star3.astro";
import Star4 from "@components/icons/Star4.astro";
import Star6 from "@components/icons/Star6.astro";
import ArrowRight from "@lucide/astro/icons/arrow-right";
import Input from "@components/Input.astro";
import Check from "@lucide/astro/icons/check";
import EndCta from "@components/EndCta.astro";

const i18n = await keystatic.singletons.homepage.read({
  resolveLinkedFiles: true,
});
invariant(i18n, "No homepage content found");

// Get all testimonials using Keystatic
const allTestimonials = await keystatic.collections.testimonials.list();
const testimonialsData = await Promise.all(
  allTestimonials.map(async (testimonial) => {
    const data = await keystatic.collections.testimonials.read(testimonial);
    return data;
  }),
);
const sortedTestimonials = testimonialsData
  .filter((t): t is NonNullable<typeof t> => Boolean(t))
  .sort((a, b) => (a.order ?? 0) - (b.order ?? 0));

// Split testimonials into 2 groups
const firstHalf = sortedTestimonials.slice(
  0,
  Math.ceil(sortedTestimonials.length / 2),
);
const secondHalf = sortedTestimonials.slice(
  Math.ceil(sortedTestimonials.length / 2),
);

const {
  hero,
  metadata,
  features: featuresData,
  steps,
  faq,
  cta,
  testimonials: testimonialsConfig,
} = i18n;

const getFeatureIcon = (title: string) => {
  const iconMap = {
    "Open Source": Oss,
    "Empowering Creators": Heart,
    "Low Fees": Percent,
  };

  return iconMap[title as keyof typeof iconMap];
};

const features = featuresData.features.map((feature) => ({
  ...feature,
  iconComponent: getFeatureIcon(feature.title),
}));
---

<Layout
  title={metadata.title}
  description={metadata.description}
  ogImage="/og.png"
>
  <section
    class="bg-green cube-bg px-base flex min-h-[700px] w-full flex-col items-center justify-center pt-[160px] pb-[80px] sm:py-[100px] sm:pt-[unset] sm:pb-[unset] lg:min-h-[800px] xl:min-h-[850px]"
  >
    <div
      class="container-content flex items-center justify-center xl:justify-between"
    >
      <div
        class="flex w-[750px] flex-col items-center gap-8 xl:items-start"
      >
        <h1
          class="flex w-full max-w-[420px] flex-col items-center text-center md:block md:max-w-full xl:text-left"
        >
          <span set:html={marked.parseInline(hero.title.text)} />
          <span
            class="text-orange relative ml-9 hidden md:inline-block"
            style="-webkit-text-stroke: 2px black;"
          >
            <span set:html={marked.parseInline(hero.title.emphasized)} />
            <Star1 class="absolute bottom-0 -left-9 size-[30px]" />
            <Star1 class="absolute top-0 -right-9 size-[30px]" />
          </span>
          <span
            class="text-orange relative inline md:hidden"
            style="-webkit-text-stroke: 1.5px black;"
          >
            <span set:html={marked.parseInline(hero.title.emphasized)} />
            <Star1 class="absolute bottom-0 -left-6 size-[22px]" />
            <Star1 class="absolute top-0 -right-6 size-[22px]" />
          </span>
        </h1>
        <p class="t-2xl max-w-[600px] text-center xl:text-left" set:html={hero.description.replace(/\*([^*]+)\*/g, "<em>$1</em>")}></p>
        <form
          id="hero"
          class="flex w-full max-w-[350px] flex-col items-center gap-5 sm:w-[unset] sm:max-w-[unset] sm:flex-row sm:gap-[10px]"
        >
          <Input
            containerClass="sm:w-max w-full"
            id="waitlist-email-hero"
            placeholder={hero.emailPlaceholder}
            required
            type="email"
            class="t-xl h-[50px] w-full max-w-full bg-white px-[15px] py-[5px] md:h-[58px] md:w-[400px]"
          />
          <Box class="w-[230px] overflow-hidden md:w-[266px]">
            <div
              class="success-message absolute -top-[58px] left-0 flex w-full flex-col items-center transition-all duration-300 ease-in-out"
            >
              <div
                class="bg-orange t-xl flex h-[50px] w-full items-center justify-center gap-2 select-none md:h-[58px]"
              >
                Joined
                <Check class="size-6" />
              </div>
            </div>
            <button
              type="submit"
              aria-label="Join the waitlist"
              class="bg-blue t-xl flex h-[50px] w-full items-center justify-center gap-2 text-white outline-none md:h-[58px] cursor-pointer"
            >
              {hero.ctaButtonText}
              <ArrowRight class="size-5 md:size-[28px] lg:size-[34px]" />
            </button>
          </Box>
        </form>
      </div>
      <div class="hidden w-[400px] xl:block">
        <div class="flex h-[400px] w-full items-end justify-between">
          <Box class="h-10 w-[165px]">
            <div class="bg-orange flex h-full items-center justify-center">
              <p class="t-xl">1%</p>
            </div>
          </Box>
          <Box class="h-[400px] w-[165px]">
            <div class="flex h-full items-center justify-center bg-white">
              <p class="t-xl">10%</p>
            </div>
          </Box>
        </div>
        <div
          class="mt-2.5 flex w-full items-end justify-between text-center text-[28px]"
        >
          <div class="h-10 w-[165px]">
            <p class="font-semibold">Patron</p>
          </div>
          <div class="h-10 w-[165px]">
            <p>Patreon</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section
    class="bg-purple diamond-bg px-base relative max-w-full border-y-5 border-y-black pt-[80px] pb-[120px] sm:pt-[100px] sm:pb-[140px] lg:pb-[200px]"
  >
    <div class="container-content text-center">
      <h2 class="mb-[60px]">{featuresData.title}</h2>

      <div
        class="mx-auto flex max-w-[400px] flex-col items-center justify-between gap-6 lg:mx-[unset] lg:max-w-[unset] lg:flex-row lg:gap-6 xl:gap-8"
      >
        {
          features.map((feature) => {
            const IconComponent = feature.iconComponent;
            return (
              <div class="lg:flex-1">
                <Box shadow>
                  <div class="bg-green relative p-5 sm:p-8 xl:p-10">
                    <div class="flex flex-col items-center justify-start gap-[25px]">
                      <div class="flex flex-col items-center justify-start gap-[25px]">
                        <IconComponent class="size-[80px] xl:size-[100px]" />
                        <h3>{feature.title}</h3>
                      </div>
                      <p class="t-lg">{feature.description}</p>
                    </div>
                  </div>
                </Box>
              </div>
            );
          })
        }
      </div>
    </div>

    <div
      class="absolute -bottom-[150px] -left-[5%] h-[265px] w-[calc(100%+5%)] overflow-hidden lg:h-[300px]"
    >
      <div class="relative h-full w-full">
        <Marquee
          repeat={10}
          gap="30px"
          pauseOnHover={false}
          className="absolute top-[90px] left-0 w-[calc(100%+10%)] rotate-[5deg] border-y-5 border-y-black bg-white py-[15px] lg:py-[30px]"
        >
          <div class="flex items-center justify-center gap-[30px]">
            <p class="t-2xl">1% FEES FOR EARLY ADOPTERS</p>
            <Star5 class="size-12" />
          </div>
        </Marquee>
        <Marquee
          repeat={10}
          gap="30px"
          pauseOnHover={false}
          direction="right"
          className="absolute bottom-[90px] left-0 w-[calc(100%+10%)] -rotate-[5deg] border-y-5 border-y-black bg-white py-[15px] lg:py-[30px]"
        >
          <div class="flex items-center justify-center gap-[30px]">
            <p class="t-2xl">1% FEES FOR EARLY ADOPTERS</p>
            <Star5 class="size-12" />
          </div>
        </Marquee>
      </div>
    </div>
  </section>

  <section
    class="bg-green cube-bg px-base flex flex-col items-center justify-center pt-[120px] pb-[80px] sm:pt-[140px] sm:pb-[100px] lg:pt-[200px]"
  >
    <div class="container-content text-center">
      <h2 class="mb-[60px]">{steps.title}</h2>

      <Steps steps={steps.steps} />
    </div>
  </section>

  {
    sortedTestimonials.length > 0 && (
      <section class="bg-orange diamond-bg px-base relative overflow-x-hidden border-y-5 border-y-black py-[80px] sm:py-[100px]">
        <Star2 class="absolute top-14 left-12 hidden size-12 sm:block lg:size-20" />
        <Star3 class="absolute top-10 right-10 hidden size-12 sm:block lg:size-20" />
        <div class="container-content text-center">
          <h2 class="mb-[60px]">{testimonialsConfig.title}</h2>

          <div class="hidden flex-col items-center justify-center gap-8 md:flex">
            <Marquee
              className="pb-[5px]"
              repeat={5}
              gap="40px"
              speed={0.2}
              direction="right"
              pauseOnHover
            >
              {firstHalf.map((testimonial) => (
                <Testimonial testimonial={testimonial} />
              ))}
            </Marquee>
            <Marquee
              pauseOnHover
              className="pb-[5px]"
              repeat={5}
              gap="40px"
              speed={0.2}
            >
              {secondHalf.map((testimonial) => (
                <Testimonial testimonial={testimonial} />
              ))}
            </Marquee>
          </div>

          <div class="mx-auto grid w-full max-w-[400px] grid-cols-1 gap-8 sm:mx-[unset] sm:w-[unset] sm:max-w-[unset] sm:grid-cols-2 md:hidden">
            {sortedTestimonials.slice(0, 6).map((testimonial) => (
              <Testimonial testimonial={testimonial} />
            ))}
          </div>
        </div>
      </section>
    )
  }

  <section
    class="bg-orange diamond-bg px-base relative overflow-hidden border-t-5 border-t-black py-[80px] sm:py-[100px]"
  >
    <Star4
      color="var(--color-blue)"
      class="absolute -top-[50px] -left-[50px] size-[100px] sm:top-[50px] lg:-left-[100px] lg:size-[200px] xl:-left-[150px] xl:size-[300px]"
    />
    <Star6
      color="var(--color-green)"
      class="absolute -right-[50px] -bottom-[50px] size-[100px] sm:bottom-[50px] lg:-right-[100px] lg:size-[200px] xl:-right-[150px] xl:size-[300px]"
    />
    <div class="container-content text-center">
      <h2 class="mb-[60px]">{faq.title}</h2>

      <div
        class="mx-auto flex w-full max-w-[550px] flex-col items-center justify-between gap-4"
      >
        {
          faq.items.map((item) => {
            return <Accordion title={item.question} details={item.answer} />;
          })
        }
      </div>
    </div>
  </section>
</Layout>

<script>
  const button = document.querySelector("form#hero button");
  const heroForm = document.querySelector("form#hero");

  if (button) {
    button.addEventListener("focus", () => {
      const parent = button.parentElement;
      if (parent) {
        parent.classList.remove("border-md");
        parent.classList.add("border-border");
      }
    });

    button.addEventListener("blur", () => {
      const parent = button.parentElement;
      if (parent) {
        parent.classList.remove("border-border");
        parent.classList.add("border-md");
      }
    });
  }

  function extractNameFromEmail(email: string): string {
    const localPart = email.split("@")[0];

    const cleanName = localPart
      .replace(/[._-]/g, " ")
      .replace(/\d+/g, "")
      .trim();

    return (
      cleanName
        .split(" ")
        .map(
          (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(),
        )
        .join(" ") || "Subscriber"
    );
  }

  async function subscribeToMailingList(email: string): Promise<boolean> {
    try {
      const name = extractNameFromEmail(email);

      const response = await fetch(
        "https://listmonk.skeptrune.com/api/public/subscription",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            email: email,
            name: name,
            list_uuids: ["44d290b4-8710-4369-a8ff-c1b65adc75ca"],
          }),
        },
      );

      if (response.ok) {
        await sendWelcomeEmail(email);
        return true;
      }

      return false;
    } catch (error) {
      console.error("Failed to subscribe:", error);
      return false;
    }
  }

  async function sendWelcomeEmail(email: string): Promise<void> {
    try {
      const response = await fetch("https://listmonk.skeptrune.com/api/tx", {
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          Authorization:
            "Basic " +
            btoa(
              `${import.meta.env.PUBLIC_LISTMONK_API_USER}:${import.meta.env.PUBLIC_LISTMONK_API_KEY}`,
            ),
        },
        body: JSON.stringify({
          subscriber_email: email,
          template_id: 3,
          content_type: "html",
          from_email: "nick.k@patron.com",
        }),
      });

      if (!response.ok) {
        console.error("Failed to send welcome email:", response.statusText);
      }
    } catch (error) {
      console.error("Error sending welcome email:", error);
    }
  }

  if (heroForm) {
    heroForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const successMessage = heroForm.querySelector(
        "form#hero .success-message",
      ) as HTMLDivElement | null;

      const input = heroForm.querySelector(
        'form#hero input[type="email"]',
      ) as HTMLInputElement | null;

      if (input && input.value) {
        const success = await subscribeToMailingList(input.value);

        if (success) {
          successMessage?.classList.add("top-0");
          successMessage?.classList.remove("top-[-58px]");

          input.value = "";
        } else {
          console.error("Subscription failed");
        }
      }
    });
  }
</script>
