---
import Layout from "@layouts/Layout.astro";
import { keystatic } from "@lib/keystatic/client";
import invariant from "tiny-invariant";
import { marked } from "marked";

import cubeGrid from "@assets/grid-cube.svg";
import diamondGrid from "@assets/grid-diamond.svg";

import Star1 from "@components/icons/Star1.astro";
import Box from "@components/Box.astro";
import Oss from "@components/icons/Oss.astro";
import Percent from "@components/icons/Percent.astro";
import Heart from "@components/icons/Heart.astro";
import Accordion from "@components/Accordion.astro";
import Marquee from "@components/Marquee.astro";
import Star5 from "@components/icons/Star5.astro";
import Steps from "@components/Steps.astro";
import Testimonial from "@components/Testimonial.astro";
import Star2 from "@components/icons/Star2.astro";
import Star3 from "@components/icons/Star3.astro";
import Star4 from "@components/icons/Star4.astro";
import Star6 from "@components/icons/Star6.astro";
import ArrowRight from "@lucide/astro/icons/arrow-right";
import Input from "@components/Input.astro";
import Check from "@lucide/astro/icons/check";
import EndCtaGrid from "@components/EndCtaGrid.astro";

const i18n = await keystatic.singletons.homepage.read({
  resolveLinkedFiles: true,
});
invariant(i18n, "No homepage content found");

// Get all testimonials using Keystatic
const allTestimonials = await keystatic.collections.testimonials.list();
const testimonialsData = await Promise.all(
  allTestimonials.map(async (testimonial) => {
    const data = await keystatic.collections.testimonials.read(testimonial);
    return data;
  }),
);
const sortedTestimonials = testimonialsData
  .filter((t): t is NonNullable<typeof t> => Boolean(t))
  .sort((a, b) => (a.order ?? 0) - (b.order ?? 0));

// Split testimonials into 2 groups
const firstHalf = sortedTestimonials.slice(
  0,
  Math.ceil(sortedTestimonials.length / 2),
);
const secondHalf = sortedTestimonials.slice(
  Math.ceil(sortedTestimonials.length / 2),
);

const {
  hero,
  metadata,
  features: featuresData,
  steps,
  faq,
  cta,
  testimonials: testimonialsConfig,
} = i18n;

const getFeatureIcon = (title: string) => {
  const iconMap = {
    "Open Source": Oss,
    "Empowering Creators": Heart,
    "Low Fees": Percent,
  };

  return iconMap[title as keyof typeof iconMap];
};

const features = featuresData.features.map((feature) => ({
  ...feature,
  iconComponent: getFeatureIcon(feature.title),
}));
---

<style
  define:vars={{
    cubeBg: `url(${cubeGrid.src})`,
    diamondBg: `url(${diamondGrid.src})`,
  }}
>
  .cube-bg {
    background-image: var(--cubeBg);
    background-size: 200px;
    background-position: 0% 0%;
  }
  .diamond-bg {
    background-image: var(--diamondBg);
    background-size: 400px;
    background-position: 0% 0%;
  }
</style>

<Layout title={metadata.title} description={metadata.description}>
  <section
    class="bg-green cube-bg flex min-h-[800px] w-full flex-col items-center justify-center px-20 py-[100px] xl:min-h-[850px]"
  >
    <div
      class="container-content flex items-center justify-center xl:justify-between"
    >
      <div
        class="flex w-[750px] flex-col items-center gap-[60px] xl:items-start"
      >
        <h1 class="w-full text-center xl:text-left">
          <span set:html={marked.parseInline(hero.title.text)} />
          <span
            class="text-orange relative ml-9"
            style="-webkit-text-stroke: 2px black;"
          >
            <span set:html={marked.parseInline(hero.title.emphasized)} />
            <Star1 class="absolute bottom-0 -left-7 size-[30px]" />
            <Star1 class="absolute top-0 -right-5 size-[30px]" />
          </span>
        </h1>
        <p class="max-w-[600px] text-center text-2xl xl:text-left">
          {hero.description}
        </p>
        <form id="hero" class="flex items-center gap-[10px]">
          <Input
            containerClass="w-max"
            placeholder={hero.emailPlaceholder}
            required
            type="email"
            class="h-[58px] w-[400px] bg-white px-[15px] py-[5px] text-xl"
          />
          <Box class="w-[266px] overflow-hidden">
            <div
              class="success-message absolute -top-[58px] left-0 flex w-full flex-col items-center transition-all duration-300 ease-in-out"
            >
              <div
                class="bg-orange flex h-[58px] w-full items-center justify-center gap-2 text-[24px] select-none"
              >
                Joined
                <Check class="size-6" />
              </div>
            </div>
            <button
              type="submit"
              aria-label="Join the waitlist"
              class="bg-blue flex h-[58px] w-full items-center justify-center gap-2 text-[24px] text-white outline-none"
            >
              {hero.ctaButtonText}
              <ArrowRight size={34} />
            </button>
          </Box>
        </form>
      </div>
      <div class="hidden w-[400px] xl:block">
        <div class="flex h-[400px] w-full items-end justify-between">
          <Box class="h-10 w-[165px]">
            <div class="bg-orange flex h-full items-center justify-center">
              <p class="text-xl">1%</p>
            </div>
          </Box>
          <Box class="h-[400px] w-[165px]">
            <div class="flex h-full items-center justify-center bg-white">
              <p class="text-xl">10%</p>
            </div>
          </Box>
        </div>
        <div
          class="mt-2.5 flex w-full items-end justify-between text-center text-[28px]"
        >
          <div class="h-10 w-[165px]">
            <p class="font-semibold">Patron</p>
          </div>
          <div class="h-10 w-[165px]">
            <p>Patreon</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section
    class="bg-purple diamond-bg relative max-w-full border-y-5 border-y-black px-20 pt-[100px] pb-[200px]"
  >
    <div class="container-content text-center">
      <h2 class="mb-[60px]">{featuresData.title}</h2>

      <div class="flex items-center justify-between gap-8">
        {
          features.map((feature) => {
            const IconComponent = feature.iconComponent;
            return (
              <Box shadow>
                <div class="bg-green relative p-10">
                  <div class="flex flex-col items-center justify-start gap-[25px]">
                    <div class="flex flex-col items-center justify-start gap-[25px]">
                      <IconComponent class="size-[100px]" />
                      <h3>{feature.title}</h3>
                    </div>
                    <p class="text-lg">{feature.description}</p>
                  </div>
                </div>
              </Box>
            );
          })
        }
      </div>
    </div>

    <div
      class="absolute -bottom-[150px] -left-[5%] h-[300px] w-[calc(100%+5%)] overflow-hidden"
    >
      <div class="relative h-full w-full">
        <Marquee
          repeat={10}
          gap="30px"
          pauseOnHover={false}
          className="absolute top-[90px] left-0 w-[calc(100%+10%)] rotate-[5deg] border-y-5 border-y-black bg-white py-[30px]"
        >
          <div class="flex items-center justify-center gap-[30px]">
            <p class="text-2xl">1% FEES FOR EARLY ADOPTERS</p>
            <Star5 class="size-12" />
          </div>
        </Marquee>
        <Marquee
          repeat={10}
          gap="30px"
          pauseOnHover={false}
          direction="right"
          className="absolute bottom-[90px] left-0 w-[calc(100%+10%)] -rotate-[5deg] border-y-5 border-y-black bg-white py-[30px]"
        >
          <div class="flex items-center justify-center gap-[30px]">
            <p class="text-2xl">1% FEES FOR EARLY ADOPTERS</p>
            <Star5 class="size-12" />
          </div>
        </Marquee>
      </div>
    </div>
  </section>

  <section
    class="bg-green cube-bg flex flex-col items-center justify-center px-20 pt-[200px] pb-[100px]"
  >
    <div class="container-content text-center">
      <h2 class="mb-[60px]">{steps.title}</h2>

      <Steps steps={steps.steps} />
    </div>
  </section>

  <section
    class="bg-orange diamond-bg relative overflow-x-hidden border-y-5 border-y-black px-20 py-[100px]"
  >
    <Star2 class="absolute top-14 left-12 size-20" />
    <Star3 class="absolute top-10 right-10 size-20" />
    <div class="container-content text-center">
      <h2 class="text-h2 mb-[60px]">{testimonialsConfig.title}</h2>

      <div class="flex flex-col items-center justify-center gap-8">
        <Marquee
          className="pb-[5px]"
          repeat={5}
          gap="40px"
          speed={0.2}
          direction="right"
          pauseOnHover
        >
          {
            firstHalf.map((testimonial) => (
              <Testimonial testimonial={testimonial} />
            ))
          }
        </Marquee>
        <Marquee
          pauseOnHover
          className="pb-[5px]"
          repeat={5}
          gap="40px"
          speed={0.2}
        >
          {
            secondHalf.map((testimonial) => (
              <Testimonial testimonial={testimonial} />
            ))
          }
        </Marquee>
      </div>
    </div>
  </section>

  <section class="bg-green cube-bg relative overflow-hidden px-20 py-[100px]">
    <Star4
      color="var(--color-blue)"
      class="absolute top-[50px] -left-[150px] size-[300px]"
    />
    <Star6
      color="var(--color-orange)"
      class="absolute -right-[150px] bottom-[50px] size-[300px]"
    />
    <div class="container-content text-center">
      <h2 class="mb-[60px]">{faq.title}</h2>

      <div class="flex flex-col items-center justify-between gap-4">
        {
          faq.items.map((item) => {
            return <Accordion title={item.question} details={item.answer} />;
          })
        }
      </div>
    </div>
  </section>

  <section
    id="waitlist"
    class="relative w-full scroll-mt-[120px] overflow-hidden border-y-[10px] border-y-black bg-black px-20 py-[100px]"
  >
    <EndCtaGrid />
    <div class="container-content">
      <Box color="white" class="w-max">
        <div
          class="flex w-max flex-col items-start justify-start gap-[60px] bg-black p-10"
        >
          <h2 class="w-[700px] text-white">
            {cta.title}
          </h2>
          <p class="relative w-[716px] text-left text-2xl text-white">
            {cta.description}
          </p>
          <form
            id="end-cta"
            class="relative flex h-[60px] items-center justify-between gap-[5px]"
          >
            <div class="relative h-full w-max">
              <Box color="white" class="h-full w-max">
                <input
                  placeholder={cta.emailPlaceholder}
                  type="email"
                  required
                  class="peer h-full w-[400px] bg-white px-[15px] py-[5px] text-xl outline-none"
                />
              </Box>
            </div>
            <div class="relative h-full w-max overflow-hidden">
              <Box color="blue" class="relative h-full w-max">
                <div
                  class="success-message bg-orange absolute -top-[65px] -left-[5px] z-10 flex size-[60px] items-center justify-center transition-all duration-300 ease-in-out select-none"
                >
                  <Check class="size-[34px]" />
                </div>
                <button
                  aria-label="Join the waitlist"
                  class="bg-blue flex size-[50px] items-center justify-center outline-none"
                >
                  <ArrowRight class="size-[34px]" color="white" />
                </button>
              </Box>
            </div>
          </form>
        </div>
      </Box>
    </div>
  </section>
</Layout>

<script>
  const button = document.querySelector("form#hero button");
  const heroForm = document.querySelector("form#hero");
  const endCtaForm = document.querySelector("form#end-cta");
  const endCtaInput = document.querySelector(
    'form#end-cta input[type="email"]',
  ) as HTMLInputElement | null;
  const endCtaButton = document.querySelector(
    "form#end-cta button",
  ) as HTMLButtonElement | null;

  endCtaInput?.addEventListener("focus", () => {
    const parent = endCtaInput?.parentElement;
    if (parent) {
      parent.classList.remove("white-border-md");
      parent.classList.add("white-border");
    }
  });

  endCtaInput?.addEventListener("blur", () => {
    const parent = endCtaInput?.parentElement;
    if (parent) {
      parent.classList.remove("white-border");
      parent.classList.add("white-border-md");
    }
  });

  endCtaButton?.addEventListener("focus", () => {
    const parent = endCtaButton?.parentElement;
    if (parent) {
      parent.classList.remove("blue-border-md");
      parent.classList.add("blue-border");
    }
  });

  endCtaButton?.addEventListener("blur", () => {
    const parent = endCtaButton?.parentElement;
    if (parent) {
      parent.classList.remove("blue-border");
      parent.classList.add("blue-border-md");
    }
  });

  if (button) {
    button.addEventListener("focus", () => {
      const parent = button.parentElement;
      if (parent) {
        parent.classList.remove("border-md");
        parent.classList.add("border-border");
      }
    });

    button.addEventListener("blur", () => {
      const parent = button.parentElement;
      if (parent) {
        parent.classList.remove("border-border");
        parent.classList.add("border-md");
      }
    });
  }

  function extractNameFromEmail(email: string): string {
    const localPart = email.split("@")[0];

    const cleanName = localPart
      .replace(/[._-]/g, " ")
      .replace(/\d+/g, "")
      .trim();

    return (
      cleanName
        .split(" ")
        .map(
          (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(),
        )
        .join(" ") || "Subscriber"
    );
  }

  async function subscribeToMailingList(email: string): Promise<boolean> {
    try {
      const name = extractNameFromEmail(email);

      const response = await fetch(
        "https://listmonk.skeptrune.com/api/public/subscription",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            email: email,
            name: name,
            list_uuids: ["44d290b4-8710-4369-a8ff-c1b65adc75ca"],
          }),
        },
      );

      if (response.ok) {
        await sendWelcomeEmail(email);
        return true;
      }

      return false;
    } catch (error) {
      console.error("Failed to subscribe:", error);
      return false;
    }
  }

  async function sendWelcomeEmail(email: string): Promise<void> {
    try {
      const response = await fetch("https://listmonk.skeptrune.com/api/tx", {
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          Authorization:
            "Basic " +
            btoa(
              `${import.meta.env.PUBLIC_LISTMONK_API_USER}:${import.meta.env.PUBLIC_LISTMONK_API_KEY}`,
            ),
        },
        body: JSON.stringify({
          subscriber_email: email,
          template_id: 3,
          content_type: "html",
          from_email: "nick.k@patron.com",
        }),
      });

      if (!response.ok) {
        console.error("Failed to send welcome email:", response.statusText);
      }
    } catch (error) {
      console.error("Error sending welcome email:", error);
    }
  }

  if (heroForm) {
    heroForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const successMessage = heroForm.querySelector(
        "form#hero .success-message",
      ) as HTMLDivElement | null;

      const input = heroForm.querySelector(
        'form#hero input[type="email"]',
      ) as HTMLInputElement | null;

      if (input && input.value) {
        console.log("input value:", input.value);

        const success = await subscribeToMailingList(input.value);

        if (success) {
          successMessage?.classList.add("top-0");
          successMessage?.classList.remove("top-[-58px]");

          input.value = "";
        } else {
          console.error("Subscription failed");
        }
      }
    });
  }

  if (endCtaForm) {
    endCtaForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const successMessage = endCtaForm.querySelector(
        "form#end-cta .success-message",
      ) as HTMLDivElement | null;

      if (endCtaInput && endCtaInput.value) {
        console.log("input value:", endCtaInput.value);

        const success = await subscribeToMailingList(endCtaInput.value);

        if (success) {
          successMessage?.classList.add("top-[-5px]");
          successMessage?.classList.remove("top-[-60px]");

          endCtaInput.value = "";
        } else {
          console.error("Subscription failed");
        }
      }
    });
  }
</script>
