---
import Layout from "@layouts/Layout.astro";
import { keystatic } from "@lib/keystatic/client";
import invariant from "tiny-invariant";
import { marked } from "marked";

import cubeGrid from "@assets/grid-cube.svg";
import diamondGrid from "@assets/grid-diamond.svg";

import Star1 from "@components/icons/Star1.astro";
import Box from "@components/Box.astro";
import Button from "@components/Button.astro";
import Oss from "@components/icons/Oss.astro";
import Percent from "@components/icons/Percent.astro";
import Heart from "@components/icons/Heart.astro";
import Accordion from "@components/Accordion.astro";
import Marquee from "@components/Marquee.astro";
import Star5 from "@components/icons/Star5.astro";
import Steps from "@components/Steps.astro";
import Testimonial from "@components/Testimonial.astro";
import Star2 from "@components/icons/Star2.astro";
import Star3 from "@components/icons/Star3.astro";
import Star4 from "@components/icons/Star4.astro";
import Star6 from "@components/icons/Star6.astro";
import ArrowRight from "@lucide/astro/icons/arrow-right";

const i18n = await keystatic.singletons.homepage.read({
  resolveLinkedFiles: true,
});
invariant(i18n, "No homepage content found");

// Get all testimonials using Keystatic
const allTestimonials = await keystatic.collections.testimonials.list();
const testimonialsData = await Promise.all(
  allTestimonials.map(async (testimonial) => {
    const data = await keystatic.collections.testimonials.read(testimonial);
    return data;
  })
);
const sortedTestimonials = testimonialsData
  .filter((t): t is NonNullable<typeof t> => Boolean(t))
  .sort((a, b) => (a.order ?? 0) - (b.order ?? 0));

// Split testimonials into 2 groups
const firstHalf = sortedTestimonials.slice(
  0,
  Math.ceil(sortedTestimonials.length / 2)
);
const secondHalf = sortedTestimonials.slice(
  Math.ceil(sortedTestimonials.length / 2)
);

const {
  hero,
  metadata,
  features: featuresData,
  steps,
  faq,
  cta,
  testimonials: testimonialsConfig,
} = i18n;

const getFeatureIcon = (title: string) => {
  const iconMap = {
    "Open Source": Oss,
    "Empowering Creators": Heart,
    "Low Fees": Percent,
  };

  return iconMap[title as keyof typeof iconMap];
};

const features = featuresData.features.map((feature) => ({
  ...feature,
  iconComponent: getFeatureIcon(feature.title),
}));
---

<style
  define:vars={{
    cubeBg: `url(${cubeGrid.src})`,
    diamondBg: `url(${diamondGrid.src})`,
  }}
>
  .cube-bg {
    background-image: var(--cubeBg);
    background-size: 200px;
    background-position: 0% 0%;
  }
  .diamond-bg {
    background-image: var(--diamondBg);
    background-size: 400px;
    background-position: 0% 0%;
  }
</style>

<Layout title={metadata.title} description={metadata.description}>
  <section
    class="bg-green cube-bg flex min-h-[850px] flex-col items-center justify-center px-20 py-[100px]"
  >
    <div class="container-content flex items-center justify-between">
      <div class="flex w-[750px] flex-col gap-[60px]">
        <h1 class="text-h1 w-full">
          <span set:html={marked.parseInline(hero.title.text)} />
          <span
            class="text-orange relative ml-9"
            style="-webkit-text-stroke: 2px black;"
          >
            <span set:html={marked.parseInline(hero.title.emphasized)} />
            <Star1 class="absolute bottom-0 -left-7 size-[30px]" />
            <Star1 class="absolute top-0 -right-5 size-[30px]" />
          </span>
        </h1>
        <p class="max-w-[600px] text-2xl">
          {hero.description}
        </p>
        <form class="flex items-center gap-[10px]">
          <Box class="w-max">
            <input
              placeholder={hero.emailPlaceholder}
              type="email"
              name="email"
              required
              class="h-[58px] w-[400px] bg-white px-[15px] py-[5px] text-xl"
            />
          </Box>
          <Box shadow={false} class="relative">
            <button
              type="submit"
              class="bg-blue flex h-[58px] items-center justify-center gap-2 px-8 text-lg font-semibold text-white transition-colors"
            >
              {hero.ctaButtonText}
              <ArrowRight />
            </button>
          </Box>
        </form>
      </div>
      <div class="w-[400px]">
        <div class="flex h-[400px] w-full items-end justify-between">
          <Box class="h-10 w-[165px]">
            <div class="bg-orange flex h-full items-center justify-center">
              <p class="text-xl">1%</p>
            </div>
          </Box>
          <Box class="h-[400px] w-[165px]">
            <div class="flex h-full items-center justify-center bg-white">
              <p class="text-xl">10% + tax</p>
            </div>
          </Box>
        </div>
        <div
          class="mt-2.5 flex w-full items-end justify-between text-center text-[28px]"
        >
          <div class="h-10 w-[165px]">
            <p class="font-semibold">Patronâ„¢</p>
          </div>
          <div class="h-10 w-[165px]">
            <p>Patreon</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section
    class="bg-purple diamond-bg relative border-y-5 border-y-black px-20 pt-[100px] pb-[200px]"
  >
    <div class="container-content text-center">
      <h2 class="text-h2 mb-[60px]">{featuresData.title}</h2>

      <div class="flex items-center justify-between gap-8">
        {
          features.map((feature) => {
            const IconComponent = feature.iconComponent;
            return (
              <Box shadow>
                <div class="bg-green relative p-10">
                  <div class="flex flex-col items-center justify-start gap-[25px]">
                    <div class="flex flex-col items-center justify-start gap-[25px]">
                      <IconComponent class="size-[100px]" />
                      <h3 class="text-h3">{feature.title}</h3>
                    </div>
                    <p class="text-lg">{feature.description}</p>
                  </div>
                </div>
              </Box>
            );
          })
        }
      </div>
    </div>

    <div class="absolute -bottom-[150px] -left-[5%] h-[300px] w-full">
      <div class="relative h-full">
        <Marquee
          repeat={10}
          gap="30px"
          pauseOnHover={false}
          className="absolute top-[90px] left-0 w-[calc(100%+10%)] rotate-6 border-y-5 border-y-black bg-white py-[30px]"
        >
          <div class="flex items-center justify-center gap-[30px]">
            <p class="text-2xl">1% FEES FOR EARLY ADOPTERS</p>
            <Star5 class="size-12" />
          </div>
        </Marquee>
        <Marquee
          repeat={10}
          gap="30px"
          pauseOnHover={false}
          className="absolute bottom-[90px] left-0 w-[calc(100%+10%)] -rotate-6 border-y-5 border-y-black bg-white py-[30px]"
        >
          <div class="flex items-center justify-center gap-[30px]">
            <p class="text-2xl">1% FEES FOR EARLY ADOPTERS</p>
            <Star5 class="size-12" />
          </div>
        </Marquee>
      </div>
    </div>
  </section>

  <section
    class="bg-green cube-bg flex flex-col items-center justify-center px-20 pt-[200px] pb-[100px]"
  >
    <div class="container-content text-center">
      <h2 class="text-h2 mb-[60px]">{steps.title}</h2>

      <Steps steps={steps.steps} />
    </div>
  </section>

  <section
    class="bg-orange diamond-bg relative border-y-5 border-y-black px-20 py-[100px]"
  >
    <Star2 class="absolute top-14 left-12 size-20" />
    <Star3 class="absolute top-10 right-10 size-20" />
    <div class="container-content text-center">
      <h2 class="text-h2 mb-[60px]">{testimonialsConfig.title}</h2>

      <div class="flex flex-col items-center justify-center gap-8">
        <Marquee
          className="pb-[5px]"
          repeat={5}
          gap="40px"
          speed={0.2}
          direction="right"
          pauseOnHover
        >
          {
            firstHalf.map((testimonial) => (
              <Testimonial testimonial={testimonial} />
            ))
          }
        </Marquee>
        <Marquee
          pauseOnHover
          className="pb-[5px]"
          repeat={5}
          gap="40px"
          speed={0.2}
        >
          {
            secondHalf.map((testimonial) => (
              <Testimonial testimonial={testimonial} />
            ))
          }
        </Marquee>
      </div>
    </div>
  </section>

  <section class="bg-green cube-bg relative overflow-hidden px-20 py-[100px]">
    <Star4
      color="var(--color-blue)"
      class="absolute top-[50px] -left-[150px] size-[300px]"
    />
    <Star6
      color="var(--color-orange)"
      class="absolute -right-[150px] bottom-[50px] size-[300px]"
    />
    <div class="container-content text-center">
      <h2 class="text-h2 mb-[60px]">{faq.title}</h2>

      <div class="flex flex-col items-center justify-between gap-4">
        {
          faq.items.map((item) => {
            return <Accordion title={item.question} details={item.answer} />;
          })
        }
      </div>
    </div>
  </section>

  <section
    id="waitlist"
    class="end-cta-bg w-full scroll-mt-[120px] border-y-[10px] border-y-black bg-black px-20 py-[100px]"
  >
    <div class="container-content">
      <Box color="white" class="w-max">
        <div
          class="flex w-max flex-col items-start justify-start gap-[60px] bg-black p-10"
        >
          <h2 class="text-h1 w-[700px] leading-[77px] text-white">
            {cta.title}
          </h2>
          <p class="relative w-[716px] text-left text-2xl text-white">
            {cta.description}
          </p>
          <form
            class="relative flex h-[60px] items-center justify-between gap-[5px]"
          >
            <div class="relative h-full w-max">
              <input
                placeholder={cta.emailPlaceholder}
                type="email"
                name="email"
                required
                class="h-full w-[400px] bg-white px-[15px] py-[5px] text-xl"
              />
              <div class="absolute top-0 right-0 size-[5px] bg-black"></div>
              <div class="absolute right-0 bottom-0 size-[5px] bg-black"></div>
              <div class="absolute top-0 left-0 size-[5px] bg-black"></div>
              <div class="absolute bottom-0 left-0 size-[5px] bg-black"></div>
            </div>
            <div class="relative h-full w-max">
              <button
                type="submit"
                class="bg-blue flex size-[60px] items-center justify-center"
              >
                <ArrowRight class="size-[34px]" color="white" />
              </button>
              <div class="absolute top-0 right-0 size-[5px] bg-black"></div>
              <div class="absolute right-0 bottom-0 size-[5px] bg-black"></div>
              <div class="absolute top-0 left-0 size-[5px] bg-black"></div>
              <div class="absolute bottom-0 left-0 size-[5px] bg-black"></div>
            </div>
          </form>
        </div>
      </Box>
    </div>
  </section>
</Layout>


<script>
  // Get all forms on the page (hero and CTA sections)
  const forms = document.querySelectorAll("form");
  const githubStarCountElement = document.getElementById("github-star-count");
  const subscriberCountValue = document.getElementById("subscriber-count-value");

  // Set up form handlers for each form
  forms.forEach((form) => {
    const emailInput = form.querySelector('input[type="email"]') as HTMLInputElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;

    if (form && emailInput && submitButton) {
      const originalButtonHTML = submitButton.innerHTML;

      form.addEventListener("submit", async (event) => {
        event.preventDefault();

        const email = emailInput.value;
        if (!email) {
          return;
        }
        const name = email.substring(0, email.indexOf("@"));
        const apiKey = import.meta.env.PUBLIC_LISTMONK_API_KEY;
        const apiUsername = "skeptrune-api-key";

        if (!apiKey) {
          console.error(
            "PUBLIC_LISTMONK_API_KEY is not set in environment variables."
          );
          submitButton.innerHTML = "Config Error";
          submitButton.disabled = true;
          return;
        }

        submitButton.innerHTML = "Submitting...";
        submitButton.disabled = true;

        try {
          const response = await fetch(
            "https://listmonk.skeptrune.com/api/subscribers",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
              },
              body: JSON.stringify({
                email: email,
                name: name,
                status: "enabled",
                lists: [3],
              }),
            }
          );

          if (response.ok) {
            submitButton.innerHTML = "Subscribed!";
            submitButton.classList.remove("bg-blue");
            submitButton.classList.add("bg-green");

            const currentCount = parseInt(
              subscriberCountValue?.textContent || "0",
              10
            );
            if (subscriberCountValue) {
              subscriberCountValue.textContent = (
                currentCount + 1
              ).toLocaleString();
            }

            try {
              const txEmailResponse = await fetch(
                "https://listmonk.skeptrune.com/api/tx",
                {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json; charset=utf-8",
                    Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
                  },
                  body: JSON.stringify({
                    subscriber_email: email,
                    template_id: 5,
                    content_type: "html",
                  }),
                }
              );
              if (!txEmailResponse.ok) {
                console.error(
                  "Failed to send welcome email:",
                  txEmailResponse.status,
                  await txEmailResponse.text()
                );
              }
            } catch (txError) {
              console.error("Error sending welcome email:", txError);
            }
          } else if (response.status === 409) {
            submitButton.innerHTML = "Already Subscribed";
            submitButton.disabled = false;
            submitButton.classList.remove("bg-blue");
            submitButton.classList.add("bg-yellow-500");

            setTimeout(() => {
              if (submitButton.innerHTML === "Already Subscribed") {
                submitButton.innerHTML = originalButtonHTML;
                submitButton.disabled = false;
                submitButton.classList.remove("bg-yellow-500");
                submitButton.classList.add("bg-blue");
              }
            }, 3000);
          } else {
            const errorData = await response.json();
            console.error("Failed to subscribe:", response.status, errorData);
            submitButton.innerHTML = "Subscription Failed";
            submitButton.disabled = false;
            submitButton.classList.remove("bg-blue");
            submitButton.classList.add("bg-red-500");

            setTimeout(() => {
              if (submitButton.innerHTML === "Subscription Failed") {
                submitButton.innerHTML = originalButtonHTML;
                submitButton.disabled = false;
                submitButton.classList.remove("bg-red-500");
                submitButton.classList.add("bg-blue");
              }
            }, 3000);
          }
        } catch (error) {
          console.error("Error submitting form:", error);
          submitButton.innerHTML = "Error";
          submitButton.disabled = false;
          submitButton.classList.remove("bg-blue");
          submitButton.classList.add("bg-red-500");

          setTimeout(() => {
            if (submitButton.innerHTML === "Error") {
              submitButton.innerHTML = originalButtonHTML;
              submitButton.disabled = false;
              submitButton.classList.remove("bg-red-500");
              submitButton.classList.add("bg-blue");
            }
          }, 3000);
        }
      });
    }
  });

  async function fetchListmonkSubscriberCount() {
    if (!subscriberCountValue) {
      console.error("Subscriber count value element not found.");
      return;
    }
    const apiKey = import.meta.env.PUBLIC_LISTMONK_API_KEY;
    const apiUsername = "skeptrune-api-key";

    if (!apiKey) {
      console.error(
        "PUBLIC_LISTMONK_API_KEY is not set in environment variables."
      );
      return;
    }

    try {
      const response = await fetch(
        "https://listmonk.skeptrune.com/api/lists?page=1&query=&order_by=id&order=asc",
        {
          method: "GET",
          headers: {
            Authorization: `Basic ${btoa(`${apiUsername}:${apiKey}`)}`,
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data && data.data && Array.isArray(data.data.results)) {
          const list = data.data.results.find(
            (item: { id: number }) => item.id === 3
          );
          if (list && typeof list.subscriber_count === "number") {
            subscriberCountValue.textContent =
              list.subscriber_count.toLocaleString();
          } else {
            console.error(
              "List with id 3 not found or subscriber_count missing:",
              data
            );
          }
        } else {
          console.error(
            "Failed to parse subscriber count from Listmonk API response:",
            data
          );
        }
      } else {
        console.error(
          "Failed to fetch Listmonk subscriber count:",
          response.status
        );
      }
    } catch (error) {
      console.error("Error fetching Listmonk subscriber count:", error);
    }
  }

  async function fetchGitHubStars() {
    if (!githubStarCountElement) {
      console.error("GitHub star count element not found.");
      return;
    }
    try {
      const response = await fetch(
        "https://api.github.com/repos/patroninc/patron"
      );
      if (response.ok) {
        const data = await response.json();
        const starCount = data.stargazers_count;
        githubStarCountElement.textContent = starCount.toLocaleString();
      } else {
        console.error("Failed to fetch GitHub stars:", response.status);
      }
    } catch (error) {
      console.error("Error fetching GitHub stars:", error);
    }
  }

  document.addEventListener("astro:page-load", () => {
    fetchGitHubStars();
    fetchListmonkSubscriberCount();
  });
</script>
