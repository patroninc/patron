/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { filesDelete } from "../funcs/filesDelete.js";
import { filesGet } from "../funcs/filesGet.js";
import { filesList } from "../funcs/filesList.js";
import { filesServeCdn } from "../funcs/filesServeCdn.js";
import { filesUpdate } from "../funcs/filesUpdate.js";
import { filesUpload } from "../funcs/filesUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Files extends ClientSDK {
  /**
   * Serve file content without authentication
   *
   * @remarks
   * This endpoint is designed to be used to get file content without authentication.
   * It returns the file content with proper cache headers for public access.
   * The file content is streamed directly from S3 to minimize memory usage for large files.
   *
   * # Errors
   * Returns an error if file not found or S3 operations fail.
   */
  async serveCdn(
    request: operations.ServeFileCdnRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(filesServeCdn(
      this,
      request,
      options,
    ));
  }

  /**
   * List user's files with cursor-based pagination
   *
   * @remarks
   * # Errors
   * Returns an error if database operations fail.
   */
  async list(
    request?: operations.ListFilesRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.UserFileInfo>> {
    return unwrapAsync(filesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload a file
   *
   * @remarks
   * # Errors
   * Returns an error if file upload, database operations, or file system operations fail.
   */
  async upload(
    request: models.FileUploadRequest,
    options?: RequestOptions,
  ): Promise<models.FileUploadResponse> {
    return unwrapAsync(filesUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific file by ID
   *
   * @remarks
   * # Errors
   * Returns an error if database operations fail or file not found.
   */
  async get(
    request: operations.GetFileRequest,
    options?: RequestOptions,
  ): Promise<models.UserFileInfo> {
    return unwrapAsync(filesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update file metadata and properties
   *
   * @remarks
   * # Errors
   * Returns an error if validation fails, file not found, or database operations fail.
   */
  async update(
    request: operations.UpdateFileRequest,
    options?: RequestOptions,
  ): Promise<models.UserFileInfo> {
    return unwrapAsync(filesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Permanently delete a user file
   *
   * @remarks
   * # Errors
   * Returns an error if file not found, permission denied, or storage operations fail.
   */
  async delete(
    request: operations.DeleteFileRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(filesDelete(
      this,
      request,
      options,
    ));
  }
}
