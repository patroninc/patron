/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authForgotPassword } from "../funcs/authForgotPassword.js";
import { authGetMe } from "../funcs/authGetMe.js";
import { authGoogleAuthCallback } from "../funcs/authGoogleAuthCallback.js";
import { authGoogleAuthRedirect } from "../funcs/authGoogleAuthRedirect.js";
import { authLogin } from "../funcs/authLogin.js";
import { authLogout } from "../funcs/authLogout.js";
import { authRegister } from "../funcs/authRegister.js";
import { authResetPassword } from "../funcs/authResetPassword.js";
import { authVerifyEmail } from "../funcs/authVerifyEmail.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Auth extends ClientSDK {
  /**
   * Forgot password
   *
   * @remarks
   * # Errors
   * Returns an error if database operations fail or email service fails.
   */
  async forgotPassword(
    request: models.ForgotPasswordRequest,
    options?: RequestOptions,
  ): Promise<models.ForgotPasswordResponse> {
    return unwrapAsync(authForgotPassword(
      this,
      request,
      options,
    ));
  }

  /**
   * Google `OAuth` redirect
   *
   * @remarks
   * # Errors
   * Returns an error if session operations fail or `OAuth` service configuration is invalid.
   */
  async googleAuthRedirect(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(authGoogleAuthRedirect(
      this,
      options,
    ));
  }

  /**
   * Google `OAuth` callback
   *
   * @remarks
   * # Errors
   * Returns an error if `OAuth` state verification fails, token exchange fails, or database operations fail.
   */
  async googleAuthCallback(
    request: operations.GoogleAuthCallbackRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(authGoogleAuthCallback(
      this,
      request,
      options,
    ));
  }

  /**
   * User login
   *
   * @remarks
   * # Errors
   * Returns an error if credentials are invalid, email is not verified, or database operations fail.
   */
  async login(
    request: models.LoginRequest,
    options?: RequestOptions,
  ): Promise<models.LoginResponse> {
    return unwrapAsync(authLogin(
      this,
      request,
      options,
    ));
  }

  /**
   * Logout
   *
   * @remarks
   * # Errors
   * Returns an error if session operations fail.
   */
  async logout(
    options?: RequestOptions,
  ): Promise<models.LogoutResponse> {
    return unwrapAsync(authLogout(
      this,
      options,
    ));
  }

  /**
   * Get current user info
   *
   * @remarks
   * # Errors
   * Returns an error if user is not authenticated or serialization fails.
   */
  async getMe(
    options?: RequestOptions,
  ): Promise<models.UserInfoResponse> {
    return unwrapAsync(authGetMe(
      this,
      options,
    ));
  }

  /**
   * User registration
   *
   * @remarks
   * # Errors
   * Returns an error if input validation fails, user already exists, or database operations fail.
   */
  async register(
    request: models.RegisterRequest,
    options?: RequestOptions,
  ): Promise<models.RegisterResponse> {
    return unwrapAsync(authRegister(
      this,
      request,
      options,
    ));
  }

  /**
   * Reset password
   *
   * @remarks
   * # Errors
   * Returns an error if token is invalid, password validation fails, or database operations fail.
   */
  async resetPassword(
    request: models.ResetPasswordRequest,
    options?: RequestOptions,
  ): Promise<models.ResetPasswordResponse> {
    return unwrapAsync(authResetPassword(
      this,
      request,
      options,
    ));
  }

  /**
   * Email verification
   *
   * @remarks
   * # Errors
   * Returns an error if token is invalid, expired, or database operations fail.
   */
  async verifyEmail(
    request: operations.VerifyEmailRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(authVerifyEmail(
      this,
      request,
      options,
    ));
  }
}
