/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { postsCreatePost } from "../funcs/postsCreatePost.js";
import { postsDeletePost } from "../funcs/postsDeletePost.js";
import { postsGetPost } from "../funcs/postsGetPost.js";
import { postsListPosts } from "../funcs/postsListPosts.js";
import { postsUpdatePost } from "../funcs/postsUpdatePost.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Posts extends ClientSDK {
  /**
   * List posts with cursor-based pagination and optional series filtering
   *
   * @remarks
   * # Errors
   * Returns error if database query fails, series filtering fails, or connection issues occur
   */
  async listPosts(
    request?: operations.ListPostsRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.PostResponse>> {
    return unwrapAsync(postsListPosts(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new post
   *
   * @remarks
   * # Errors
   * Returns error if series not found, access denied, slug/number conflict, or database error
   */
  async createPost(
    request: models.CreatePostRequest,
    options?: RequestOptions,
  ): Promise<models.PostResponse> {
    return unwrapAsync(postsCreatePost(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific post by ID with series ownership validation
   *
   * @remarks
   * # Errors
   * Returns error if post not found, series access denied, or database connection error
   */
  async getPost(
    request: operations.GetPostRequest,
    options?: RequestOptions,
  ): Promise<models.PostResponse> {
    return unwrapAsync(postsGetPost(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a post
   *
   * @remarks
   * # Errors
   * Returns error if post not found, access denied, slug/number conflict, or database update error
   */
  async updatePost(
    request: operations.UpdatePostRequest,
    options?: RequestOptions,
  ): Promise<models.PostResponse> {
    return unwrapAsync(postsUpdatePost(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a post (soft delete) with series ownership validation
   *
   * @remarks
   * # Errors
   * Returns error if post not found, series access denied, or database deletion error
   */
  async deletePost(
    request: operations.DeletePostRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(postsDeletePost(
      this,
      request,
      options,
    ));
  }
}
