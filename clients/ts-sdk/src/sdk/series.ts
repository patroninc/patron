/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { seriesCreateSeries } from "../funcs/seriesCreateSeries.js";
import { seriesDeleteSeries } from "../funcs/seriesDeleteSeries.js";
import { seriesGetSeries } from "../funcs/seriesGetSeries.js";
import { seriesListSeries } from "../funcs/seriesListSeries.js";
import { seriesUpdateSeries } from "../funcs/seriesUpdateSeries.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Series extends ClientSDK {
  /**
   * List user's series with cursor-based pagination
   *
   * @remarks
   * # Errors
   * Returns error if database query fails or connection issues occur
   */
  async listSeries(
    request?: operations.ListSeriesRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.SeriesResponse>> {
    return unwrapAsync(seriesListSeries(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new series
   *
   * @remarks
   * # Errors
   * Returns error if series creation fails, slug conflict, or database error
   */
  async createSeries(
    request: models.CreateSeriesRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesResponse> {
    return unwrapAsync(seriesCreateSeries(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific series by ID with user ownership validation
   *
   * @remarks
   * # Errors
   * Returns error if series not found, user access denied, or database connection error
   */
  async getSeries(
    request: operations.GetSeriesRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesResponse> {
    return unwrapAsync(seriesGetSeries(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a series
   *
   * @remarks
   * # Errors
   * Returns error if series not found, access denied, slug conflict, or database update error
   */
  async updateSeries(
    request: operations.UpdateSeriesRequest,
    options?: RequestOptions,
  ): Promise<models.SeriesResponse> {
    return unwrapAsync(seriesUpdateSeries(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a series (soft delete) with user ownership validation
   *
   * @remarks
   * # Errors
   * Returns error if series not found, user access denied, or database deletion error
   */
  async deleteSeries(
    request: operations.DeleteSeriesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(seriesDeleteSeries(
      this,
      request,
      options,
    ));
  }
}
