/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apiKeysCreate } from "../funcs/apiKeysCreate.js";
import { apiKeysDelete } from "../funcs/apiKeysDelete.js";
import { apiKeysGet } from "../funcs/apiKeysGet.js";
import { apiKeysList } from "../funcs/apiKeysList.js";
import { apiKeysUpdate } from "../funcs/apiKeysUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class ApiKeys extends ClientSDK {
  /**
   * List API keys with cursor-based pagination and optional filtering
   *
   * @remarks
   * # Errors
   * Returns error if API keys database query fails or connection issues occur
   */
  async list(
    request?: operations.ListApiKeysRequest | undefined,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.ListApiKeysResponse, { cursor: string }>> {
    return unwrapResultIterator(apiKeysList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new API key
   *
   * @remarks
   * # Errors
   * Returns error if permissions are invalid, database error, or key generation fails
   */
  async create(
    request: models.CreateApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.CreateApiKeyResponse> {
    return unwrapAsync(apiKeysCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific API key by ID
   *
   * @remarks
   * # Errors
   * Returns error if API key not found, access denied, or database connection error
   */
  async get(
    request: operations.GetApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ApiKeyResponse> {
    return unwrapAsync(apiKeysGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an API key
   *
   * @remarks
   * # Errors
   * Returns error if API key not found, access denied, or database update error
   */
  async update(
    request: operations.UpdateApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ApiKeyResponse> {
    return unwrapAsync(apiKeysUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an API key (hard delete for security)
   *
   * @remarks
   * # Errors
   * Returns error if API key not found, access denied, or database deletion error
   */
  async delete(
    request: operations.DeleteApiKeyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(apiKeysDelete(
      this,
      request,
      options,
    ));
  }
}
