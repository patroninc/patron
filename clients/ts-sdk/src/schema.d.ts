/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Forgot password */
        post: operations["forgot_password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Google OAuth redirect */
        get: operations["google_auth_redirect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Google OAuth callback */
        get: operations["google_auth_callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logout */
        get: operations["logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user info */
        get: operations["get_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User registration */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset password */
        post: operations["reset_password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Email verification */
        get: operations["verify_email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description OAuth callback query parameters from Google OAuth flow
         * @example {
         *       "code": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7",
         *       "state": "3d6f3e72-7e68-4f53-a8e7-2c5e8f7b3f1a"
         *     }
         */
        AuthCallbackQuery: {
            /** @description Authorization code from OAuth provider */
            code: string;
            /** @description State parameter for CSRF protection */
            state: string;
        };
        /**
         * @description Authentication provider types supported by the system
         * @enum {string}
         */
        AuthProvider: "google" | "email" | "both";
        /**
         * @description Request body for password reset
         * @example {
         *       "email": "user@example.com"
         *     }
         */
        ForgotPasswordRequest: {
            /** @description User's email address */
            email: string;
        };
        /**
         * @description Response for password reset request
         * @example {
         *       "message": "If the email exists in our system, a password reset link has been sent."
         *     }
         */
        ForgotPasswordResponse: {
            /** @description Status message */
            message: string;
        };
        /**
         * @description Request body for user login
         * @example {
         *       "email": "user@example.com",
         *       "password": "password123"
         *     }
         */
        LoginRequest: {
            /** @description User's email address */
            email: string;
            /** @description User's password */
            password: string;
        };
        /**
         * @description Response for successful user login
         * @example {
         *       "message": "Login successful",
         *       "user": {
         *         "auth_provider": "email",
         *         "display_name": "John Doe",
         *         "email": "user@example.com",
         *         "id": "d290f1ee-6c54-4b01-90e6-d701748f0851"
         *       }
         *     }
         */
        LoginResponse: {
            /** @description Success message */
            message: string;
            /** @description User information */
            user: components["schemas"]["UserInfo"];
        };
        /**
         * @description Response for successful logout
         * @example {
         *       "message": "Logged out successfully"
         *     }
         */
        LogoutResponse: {
            /** @description Success message */
            message: string;
        };
        /**
         * @description Request body for user registration.
         * @example {
         *       "email": "user@example.com",
         *       "password": "password123"
         *     }
         */
        RegisterRequest: {
            /** @description User's email address */
            email: string;
            /** @description User's password (minimum 8 characters) */
            password: string;
        };
        /**
         * @description Response for successful user registration
         * @example {
         *       "message": "Registration successful. Please check your email for verification.",
         *       "user_id": "d290f1ee-6c54-4b01-90e6-d701748f0851"
         *     }
         */
        RegisterResponse: {
            /** @description Success message */
            message: string;
            /**
             * Format: uuid
             * @description Unique identifier of the registered user
             */
            user_id: string;
        };
        /**
         * @description Request body for password reset confirmation
         * @example {
         *       "new_password": "newpassword123",
         *       "token": "550e8400-e29b-41d4-a716-446655440000"
         *     }
         */
        ResetPasswordRequest: {
            /** @description New password (minimum 8 characters) */
            new_password: string;
            /** @description Password reset token */
            token: string;
        };
        /**
         * @description Response for successful password reset
         * @example {
         *       "message": "Password has been reset successfully"
         *     }
         */
        ResetPasswordResponse: {
            /** @description Success message */
            message: string;
        };
        /** @description User information for API responses and internal use */
        UserInfo: {
            /** @description Authentication provider used by the user */
            auth_provider: components["schemas"]["AuthProvider"];
            /** @description URL to user's avatar image */
            avatar_url?: string | null;
            /**
             * Format: date-time
             * @description Timestamp when user was created
             */
            created_at?: string | null;
            /** @description User's display name */
            display_name?: string | null;
            /** @description User's email address */
            email: string;
            /** @description Whether the user's email has been verified */
            email_verified: boolean;
            /**
             * Format: uuid
             * @description Unique user identifier
             */
            id: string;
            /**
             * Format: date-time
             * @description Timestamp of user's last login
             */
            last_login?: string | null;
        };
        /** @description Simplified user information for public API responses */
        UserInfoResponse: {
            /**
             * Format: date-time
             * @description Timestamp when user was created
             */
            created_at?: string | null;
            /** @description User's email address */
            email: string;
            /**
             * Format: uuid
             * @description Unique user identifier
             */
            id: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    forgot_password: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgotPasswordRequest"];
            };
        };
        responses: {
            /** @description Password reset email sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForgotPasswordResponse"];
                };
            };
        };
    };
    google_auth_redirect: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to Google OAuth consent screen */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    google_auth_callback: {
        parameters: {
            query: {
                /** @description Authorization code from Google */
                code: string;
                /** @description State parameter for CSRF protection */
                state: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to frontend application */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid authorization code or state */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Invalid credentials or email not verified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutResponse"];
                };
            };
        };
    };
    get_me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current user information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoResponse"];
                };
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Registration successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponse"];
                };
            };
            /** @description Invalid input or email already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    reset_password: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            /** @description Password reset successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordResponse"];
                };
            };
            /** @description Invalid token or password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    verify_email: {
        parameters: {
            query: {
                /** @description Email verification token */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to frontend after verification */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or expired token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
