/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request payload for updating post content, metadata, or status
 */
export type UpdatePostRequest = {
  /**
   * Updated audio file reference for the post
   */
  audioFileId?: string | null | undefined;
  /**
   * Updated post content text (optional)
   */
  content?: string | null | undefined;
  /**
   * Modify premium subscription requirement for this post
   */
  isPremium?: boolean | null | undefined;
  /**
   * Change the publication visibility of this post
   */
  isPublished?: boolean | null | undefined;
  /**
   * Updated sequential number within the series (optional)
   */
  postNumber?: number | null | undefined;
  /**
   * New URL-friendly slug for the post (optional)
   */
  slug?: string | null | undefined;
  /**
   * Replace the post's cover image with a new URL
   */
  thumbnailUrl?: string | null | undefined;
  /**
   * New title for the post (optional)
   */
  title?: string | null | undefined;
  /**
   * Updated video file reference for the post
   */
  videoFileId?: string | null | undefined;
};

/** @internal */
export const UpdatePostRequest$inboundSchema: z.ZodType<
  UpdatePostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  audioFileId: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  isPremium: z.nullable(z.boolean()).optional(),
  isPublished: z.nullable(z.boolean()).optional(),
  postNumber: z.nullable(z.number().int()).optional(),
  slug: z.nullable(z.string()).optional(),
  thumbnailUrl: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  videoFileId: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdatePostRequest$Outbound = {
  audioFileId?: string | null | undefined;
  content?: string | null | undefined;
  isPremium?: boolean | null | undefined;
  isPublished?: boolean | null | undefined;
  postNumber?: number | null | undefined;
  slug?: string | null | undefined;
  thumbnailUrl?: string | null | undefined;
  title?: string | null | undefined;
  videoFileId?: string | null | undefined;
};

/** @internal */
export const UpdatePostRequest$outboundSchema: z.ZodType<
  UpdatePostRequest$Outbound,
  z.ZodTypeDef,
  UpdatePostRequest
> = z.object({
  audioFileId: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  isPremium: z.nullable(z.boolean()).optional(),
  isPublished: z.nullable(z.boolean()).optional(),
  postNumber: z.nullable(z.number().int()).optional(),
  slug: z.nullable(z.string()).optional(),
  thumbnailUrl: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  videoFileId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePostRequest$ {
  /** @deprecated use `UpdatePostRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePostRequest$inboundSchema;
  /** @deprecated use `UpdatePostRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePostRequest$outboundSchema;
  /** @deprecated use `UpdatePostRequest$Outbound` instead. */
  export type Outbound = UpdatePostRequest$Outbound;
}

export function updatePostRequestToJSON(
  updatePostRequest: UpdatePostRequest,
): string {
  return JSON.stringify(
    UpdatePostRequest$outboundSchema.parse(updatePostRequest),
  );
}

export function updatePostRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePostRequest' from JSON`,
  );
}
