/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFilesRequest = {
  /**
   * UUID offset for cursor-based files pagination
   */
  offset?: string | null | undefined;
  /**
   * Maximum number of files to return (default: 50, max: 100)
   */
  limit?: number | null | undefined;
};

/** @internal */
export const ListFilesRequest$inboundSchema: z.ZodType<
  ListFilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  offset: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type ListFilesRequest$Outbound = {
  offset?: string | null | undefined;
  limit?: number | null | undefined;
};

/** @internal */
export const ListFilesRequest$outboundSchema: z.ZodType<
  ListFilesRequest$Outbound,
  z.ZodTypeDef,
  ListFilesRequest
> = z.object({
  offset: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFilesRequest$ {
  /** @deprecated use `ListFilesRequest$inboundSchema` instead. */
  export const inboundSchema = ListFilesRequest$inboundSchema;
  /** @deprecated use `ListFilesRequest$outboundSchema` instead. */
  export const outboundSchema = ListFilesRequest$outboundSchema;
  /** @deprecated use `ListFilesRequest$Outbound` instead. */
  export type Outbound = ListFilesRequest$Outbound;
}

export function listFilesRequestToJSON(
  listFilesRequest: ListFilesRequest,
): string {
  return JSON.stringify(
    ListFilesRequest$outboundSchema.parse(listFilesRequest),
  );
}

export function listFilesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFilesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFilesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFilesRequest' from JSON`,
  );
}
