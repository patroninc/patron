/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ProcessWebhookSecurity = {
  bearerAuth: string;
};

/** @internal */
export const ProcessWebhookSecurity$inboundSchema: z.ZodType<
  ProcessWebhookSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearerAuth: z.string(),
});

/** @internal */
export type ProcessWebhookSecurity$Outbound = {
  bearerAuth: string;
};

/** @internal */
export const ProcessWebhookSecurity$outboundSchema: z.ZodType<
  ProcessWebhookSecurity$Outbound,
  z.ZodTypeDef,
  ProcessWebhookSecurity
> = z.object({
  bearerAuth: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessWebhookSecurity$ {
  /** @deprecated use `ProcessWebhookSecurity$inboundSchema` instead. */
  export const inboundSchema = ProcessWebhookSecurity$inboundSchema;
  /** @deprecated use `ProcessWebhookSecurity$outboundSchema` instead. */
  export const outboundSchema = ProcessWebhookSecurity$outboundSchema;
  /** @deprecated use `ProcessWebhookSecurity$Outbound` instead. */
  export type Outbound = ProcessWebhookSecurity$Outbound;
}

export function processWebhookSecurityToJSON(
  processWebhookSecurity: ProcessWebhookSecurity,
): string {
  return JSON.stringify(
    ProcessWebhookSecurity$outboundSchema.parse(processWebhookSecurity),
  );
}

export function processWebhookSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ProcessWebhookSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProcessWebhookSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProcessWebhookSecurity' from JSON`,
  );
}
