/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListPostsRequest = {
  /**
   * UUID offset for cursor-based posts pagination
   */
  offset?: string | null | undefined;
  /**
   * Maximum number of posts to return (default: 50, max: 100)
   */
  limit?: number | null | undefined;
  /**
   * Filter posts by series ID
   */
  seriesId?: string | null | undefined;
};

export type ListPostsResponse = {
  result: Array<models.PostResponse>;
};

/** @internal */
export const ListPostsRequest$inboundSchema: z.ZodType<
  ListPostsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  offset: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  series_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "series_id": "seriesId",
  });
});

/** @internal */
export type ListPostsRequest$Outbound = {
  offset?: string | null | undefined;
  limit?: number | null | undefined;
  series_id?: string | null | undefined;
};

/** @internal */
export const ListPostsRequest$outboundSchema: z.ZodType<
  ListPostsRequest$Outbound,
  z.ZodTypeDef,
  ListPostsRequest
> = z.object({
  offset: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  seriesId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    seriesId: "series_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPostsRequest$ {
  /** @deprecated use `ListPostsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPostsRequest$inboundSchema;
  /** @deprecated use `ListPostsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPostsRequest$outboundSchema;
  /** @deprecated use `ListPostsRequest$Outbound` instead. */
  export type Outbound = ListPostsRequest$Outbound;
}

export function listPostsRequestToJSON(
  listPostsRequest: ListPostsRequest,
): string {
  return JSON.stringify(
    ListPostsRequest$outboundSchema.parse(listPostsRequest),
  );
}

export function listPostsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPostsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPostsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPostsRequest' from JSON`,
  );
}

/** @internal */
export const ListPostsResponse$inboundSchema: z.ZodType<
  ListPostsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.array(models.PostResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListPostsResponse$Outbound = {
  Result: Array<models.PostResponse$Outbound>;
};

/** @internal */
export const ListPostsResponse$outboundSchema: z.ZodType<
  ListPostsResponse$Outbound,
  z.ZodTypeDef,
  ListPostsResponse
> = z.object({
  result: z.array(models.PostResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPostsResponse$ {
  /** @deprecated use `ListPostsResponse$inboundSchema` instead. */
  export const inboundSchema = ListPostsResponse$inboundSchema;
  /** @deprecated use `ListPostsResponse$outboundSchema` instead. */
  export const outboundSchema = ListPostsResponse$outboundSchema;
  /** @deprecated use `ListPostsResponse$Outbound` instead. */
  export type Outbound = ListPostsResponse$Outbound;
}

export function listPostsResponseToJSON(
  listPostsResponse: ListPostsResponse,
): string {
  return JSON.stringify(
    ListPostsResponse$outboundSchema.parse(listPostsResponse),
  );
}

export function listPostsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPostsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPostsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPostsResponse' from JSON`,
  );
}
