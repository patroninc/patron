/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateSeriesRequest = {
  /**
   * UUID of the series to update
   */
  seriesId: string;
  /**
   * Updated series data
   */
  updateSeriesRequest: models.UpdateSeriesRequest;
};

/** @internal */
export const UpdateSeriesRequest$inboundSchema: z.ZodType<
  UpdateSeriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  series_id: z.string(),
  UpdateSeriesRequest: models.UpdateSeriesRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "series_id": "seriesId",
    "UpdateSeriesRequest": "updateSeriesRequest",
  });
});

/** @internal */
export type UpdateSeriesRequest$Outbound = {
  series_id: string;
  UpdateSeriesRequest: models.UpdateSeriesRequest$Outbound;
};

/** @internal */
export const UpdateSeriesRequest$outboundSchema: z.ZodType<
  UpdateSeriesRequest$Outbound,
  z.ZodTypeDef,
  UpdateSeriesRequest
> = z.object({
  seriesId: z.string(),
  updateSeriesRequest: models.UpdateSeriesRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    seriesId: "series_id",
    updateSeriesRequest: "UpdateSeriesRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSeriesRequest$ {
  /** @deprecated use `UpdateSeriesRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSeriesRequest$inboundSchema;
  /** @deprecated use `UpdateSeriesRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSeriesRequest$outboundSchema;
  /** @deprecated use `UpdateSeriesRequest$Outbound` instead. */
  export type Outbound = UpdateSeriesRequest$Outbound;
}

export function updateSeriesRequestToJSON(
  updateSeriesRequest: UpdateSeriesRequest,
): string {
  return JSON.stringify(
    UpdateSeriesRequest$outboundSchema.parse(updateSeriesRequest),
  );
}

export function updateSeriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSeriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSeriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSeriesRequest' from JSON`,
  );
}
