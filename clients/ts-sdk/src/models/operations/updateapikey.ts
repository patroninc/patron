/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateApiKeyRequest = {
  /**
   * UUID of the API key to update
   */
  apiKeyId: string;
  /**
   * Updated API key data
   */
  updateApiKeyRequest: models.UpdateApiKeyRequest;
};

/** @internal */
export const UpdateApiKeyRequest$inboundSchema: z.ZodType<
  UpdateApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key_id: z.string(),
  UpdateApiKeyRequest: models.UpdateApiKeyRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_key_id": "apiKeyId",
    "UpdateApiKeyRequest": "updateApiKeyRequest",
  });
});

/** @internal */
export type UpdateApiKeyRequest$Outbound = {
  api_key_id: string;
  UpdateApiKeyRequest: models.UpdateApiKeyRequest$Outbound;
};

/** @internal */
export const UpdateApiKeyRequest$outboundSchema: z.ZodType<
  UpdateApiKeyRequest$Outbound,
  z.ZodTypeDef,
  UpdateApiKeyRequest
> = z.object({
  apiKeyId: z.string(),
  updateApiKeyRequest: models.UpdateApiKeyRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiKeyId: "api_key_id",
    updateApiKeyRequest: "UpdateApiKeyRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApiKeyRequest$ {
  /** @deprecated use `UpdateApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateApiKeyRequest$inboundSchema;
  /** @deprecated use `UpdateApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateApiKeyRequest$outboundSchema;
  /** @deprecated use `UpdateApiKeyRequest$Outbound` instead. */
  export type Outbound = UpdateApiKeyRequest$Outbound;
}

export function updateApiKeyRequestToJSON(
  updateApiKeyRequest: UpdateApiKeyRequest,
): string {
  return JSON.stringify(
    UpdateApiKeyRequest$outboundSchema.parse(updateApiKeyRequest),
  );
}

export function updateApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApiKeyRequest' from JSON`,
  );
}
