/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFileRequest = {
  /**
   * UUID of the file to retrieve details for
   */
  fileId: string;
};

/** @internal */
export const GetFileRequest$inboundSchema: z.ZodType<
  GetFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type GetFileRequest$Outbound = {
  file_id: string;
};

/** @internal */
export const GetFileRequest$outboundSchema: z.ZodType<
  GetFileRequest$Outbound,
  z.ZodTypeDef,
  GetFileRequest
> = z.object({
  fileId: z.string(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFileRequest$ {
  /** @deprecated use `GetFileRequest$inboundSchema` instead. */
  export const inboundSchema = GetFileRequest$inboundSchema;
  /** @deprecated use `GetFileRequest$outboundSchema` instead. */
  export const outboundSchema = GetFileRequest$outboundSchema;
  /** @deprecated use `GetFileRequest$Outbound` instead. */
  export type Outbound = GetFileRequest$Outbound;
}

export function getFileRequestToJSON(getFileRequest: GetFileRequest): string {
  return JSON.stringify(GetFileRequest$outboundSchema.parse(getFileRequest));
}

export function getFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFileRequest' from JSON`,
  );
}
