/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPostRequest = {
  /**
   * UUID of the post to retrieve
   */
  postId: string;
};

/** @internal */
export const GetPostRequest$inboundSchema: z.ZodType<
  GetPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  post_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "post_id": "postId",
  });
});

/** @internal */
export type GetPostRequest$Outbound = {
  post_id: string;
};

/** @internal */
export const GetPostRequest$outboundSchema: z.ZodType<
  GetPostRequest$Outbound,
  z.ZodTypeDef,
  GetPostRequest
> = z.object({
  postId: z.string(),
}).transform((v) => {
  return remap$(v, {
    postId: "post_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPostRequest$ {
  /** @deprecated use `GetPostRequest$inboundSchema` instead. */
  export const inboundSchema = GetPostRequest$inboundSchema;
  /** @deprecated use `GetPostRequest$outboundSchema` instead. */
  export const outboundSchema = GetPostRequest$outboundSchema;
  /** @deprecated use `GetPostRequest$Outbound` instead. */
  export type Outbound = GetPostRequest$Outbound;
}

export function getPostRequestToJSON(getPostRequest: GetPostRequest): string {
  return JSON.stringify(GetPostRequest$outboundSchema.parse(getPostRequest));
}

export function getPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPostRequest' from JSON`,
  );
}
