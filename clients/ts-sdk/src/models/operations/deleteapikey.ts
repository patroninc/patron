/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteApiKeyRequest = {
  /**
   * UUID of the API key to delete
   */
  apiKeyId: string;
};

/** @internal */
export const DeleteApiKeyRequest$inboundSchema: z.ZodType<
  DeleteApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_key_id": "apiKeyId",
  });
});

/** @internal */
export type DeleteApiKeyRequest$Outbound = {
  api_key_id: string;
};

/** @internal */
export const DeleteApiKeyRequest$outboundSchema: z.ZodType<
  DeleteApiKeyRequest$Outbound,
  z.ZodTypeDef,
  DeleteApiKeyRequest
> = z.object({
  apiKeyId: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiKeyId: "api_key_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteApiKeyRequest$ {
  /** @deprecated use `DeleteApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteApiKeyRequest$inboundSchema;
  /** @deprecated use `DeleteApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteApiKeyRequest$outboundSchema;
  /** @deprecated use `DeleteApiKeyRequest$Outbound` instead. */
  export type Outbound = DeleteApiKeyRequest$Outbound;
}

export function deleteApiKeyRequestToJSON(
  deleteApiKeyRequest: DeleteApiKeyRequest,
): string {
  return JSON.stringify(
    DeleteApiKeyRequest$outboundSchema.parse(deleteApiKeyRequest),
  );
}

export function deleteApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteApiKeyRequest' from JSON`,
  );
}
