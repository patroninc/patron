/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListSeriesRequest = {
  /**
   * UUID offset for cursor-based series pagination
   */
  offset?: string | null | undefined;
  /**
   * Maximum number of series to return (default: 50, max: 100)
   */
  limit?: number | null | undefined;
};

/** @internal */
export const ListSeriesRequest$inboundSchema: z.ZodType<
  ListSeriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  offset: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type ListSeriesRequest$Outbound = {
  offset?: string | null | undefined;
  limit?: number | null | undefined;
};

/** @internal */
export const ListSeriesRequest$outboundSchema: z.ZodType<
  ListSeriesRequest$Outbound,
  z.ZodTypeDef,
  ListSeriesRequest
> = z.object({
  offset: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSeriesRequest$ {
  /** @deprecated use `ListSeriesRequest$inboundSchema` instead. */
  export const inboundSchema = ListSeriesRequest$inboundSchema;
  /** @deprecated use `ListSeriesRequest$outboundSchema` instead. */
  export const outboundSchema = ListSeriesRequest$outboundSchema;
  /** @deprecated use `ListSeriesRequest$Outbound` instead. */
  export type Outbound = ListSeriesRequest$Outbound;
}

export function listSeriesRequestToJSON(
  listSeriesRequest: ListSeriesRequest,
): string {
  return JSON.stringify(
    ListSeriesRequest$outboundSchema.parse(listSeriesRequest),
  );
}

export function listSeriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSeriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSeriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSeriesRequest' from JSON`,
  );
}
