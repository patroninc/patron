/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdatePostRequest = {
  /**
   * UUID of the post to update
   */
  postId: string;
  /**
   * Updated post data
   */
  updatePostRequest: models.UpdatePostRequest;
};

/** @internal */
export const UpdatePostRequest$inboundSchema: z.ZodType<
  UpdatePostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  post_id: z.string(),
  UpdatePostRequest: models.UpdatePostRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "post_id": "postId",
    "UpdatePostRequest": "updatePostRequest",
  });
});

/** @internal */
export type UpdatePostRequest$Outbound = {
  post_id: string;
  UpdatePostRequest: models.UpdatePostRequest$Outbound;
};

/** @internal */
export const UpdatePostRequest$outboundSchema: z.ZodType<
  UpdatePostRequest$Outbound,
  z.ZodTypeDef,
  UpdatePostRequest
> = z.object({
  postId: z.string(),
  updatePostRequest: models.UpdatePostRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    postId: "post_id",
    updatePostRequest: "UpdatePostRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePostRequest$ {
  /** @deprecated use `UpdatePostRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePostRequest$inboundSchema;
  /** @deprecated use `UpdatePostRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePostRequest$outboundSchema;
  /** @deprecated use `UpdatePostRequest$Outbound` instead. */
  export type Outbound = UpdatePostRequest$Outbound;
}

export function updatePostRequestToJSON(
  updatePostRequest: UpdatePostRequest,
): string {
  return JSON.stringify(
    UpdatePostRequest$outboundSchema.parse(updatePostRequest),
  );
}

export function updatePostRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePostRequest' from JSON`,
  );
}
