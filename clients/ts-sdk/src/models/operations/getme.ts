/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetMeSecurity = {
  cookieAuth: string;
};

/** @internal */
export const GetMeSecurity$inboundSchema: z.ZodType<
  GetMeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  cookieAuth: z.string(),
});

/** @internal */
export type GetMeSecurity$Outbound = {
  cookieAuth: string;
};

/** @internal */
export const GetMeSecurity$outboundSchema: z.ZodType<
  GetMeSecurity$Outbound,
  z.ZodTypeDef,
  GetMeSecurity
> = z.object({
  cookieAuth: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMeSecurity$ {
  /** @deprecated use `GetMeSecurity$inboundSchema` instead. */
  export const inboundSchema = GetMeSecurity$inboundSchema;
  /** @deprecated use `GetMeSecurity$outboundSchema` instead. */
  export const outboundSchema = GetMeSecurity$outboundSchema;
  /** @deprecated use `GetMeSecurity$Outbound` instead. */
  export type Outbound = GetMeSecurity$Outbound;
}

export function getMeSecurityToJSON(getMeSecurity: GetMeSecurity): string {
  return JSON.stringify(GetMeSecurity$outboundSchema.parse(getMeSecurity));
}

export function getMeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetMeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMeSecurity' from JSON`,
  );
}
