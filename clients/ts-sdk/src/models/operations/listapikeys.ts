/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListApiKeysRequest = {
  /**
   * Starting point UUID for paginated API key results
   */
  offset?: string | null | undefined;
  /**
   * Number of API keys to return per page (default: 50, max: 100)
   */
  limit?: number | null | undefined;
  /**
   * Only show active or inactive API keys
   */
  isActive?: boolean | null | undefined;
};

export type ListApiKeysResponse = {
  result: Array<models.ApiKeyResponse>;
};

/** @internal */
export const ListApiKeysRequest$inboundSchema: z.ZodType<
  ListApiKeysRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  offset: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  isActive: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ListApiKeysRequest$Outbound = {
  offset?: string | null | undefined;
  limit?: number | null | undefined;
  isActive?: boolean | null | undefined;
};

/** @internal */
export const ListApiKeysRequest$outboundSchema: z.ZodType<
  ListApiKeysRequest$Outbound,
  z.ZodTypeDef,
  ListApiKeysRequest
> = z.object({
  offset: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int()).optional(),
  isActive: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListApiKeysRequest$ {
  /** @deprecated use `ListApiKeysRequest$inboundSchema` instead. */
  export const inboundSchema = ListApiKeysRequest$inboundSchema;
  /** @deprecated use `ListApiKeysRequest$outboundSchema` instead. */
  export const outboundSchema = ListApiKeysRequest$outboundSchema;
  /** @deprecated use `ListApiKeysRequest$Outbound` instead. */
  export type Outbound = ListApiKeysRequest$Outbound;
}

export function listApiKeysRequestToJSON(
  listApiKeysRequest: ListApiKeysRequest,
): string {
  return JSON.stringify(
    ListApiKeysRequest$outboundSchema.parse(listApiKeysRequest),
  );
}

export function listApiKeysRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListApiKeysRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListApiKeysRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListApiKeysRequest' from JSON`,
  );
}

/** @internal */
export const ListApiKeysResponse$inboundSchema: z.ZodType<
  ListApiKeysResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.array(models.ApiKeyResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListApiKeysResponse$Outbound = {
  Result: Array<models.ApiKeyResponse$Outbound>;
};

/** @internal */
export const ListApiKeysResponse$outboundSchema: z.ZodType<
  ListApiKeysResponse$Outbound,
  z.ZodTypeDef,
  ListApiKeysResponse
> = z.object({
  result: z.array(models.ApiKeyResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListApiKeysResponse$ {
  /** @deprecated use `ListApiKeysResponse$inboundSchema` instead. */
  export const inboundSchema = ListApiKeysResponse$inboundSchema;
  /** @deprecated use `ListApiKeysResponse$outboundSchema` instead. */
  export const outboundSchema = ListApiKeysResponse$outboundSchema;
  /** @deprecated use `ListApiKeysResponse$Outbound` instead. */
  export type Outbound = ListApiKeysResponse$Outbound;
}

export function listApiKeysResponseToJSON(
  listApiKeysResponse: ListApiKeysResponse,
): string {
  return JSON.stringify(
    ListApiKeysResponse$outboundSchema.parse(listApiKeysResponse),
  );
}

export function listApiKeysResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListApiKeysResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListApiKeysResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListApiKeysResponse' from JSON`,
  );
}
