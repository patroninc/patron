/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Response for successful user registration
 */
export type RegisterResponse = {
  /**
   * Success message
   */
  message: string;
  /**
   * Unique identifier of the registered user
   */
  userId: string;
};

/** @internal */
export const RegisterResponse$inboundSchema: z.ZodType<
  RegisterResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type RegisterResponse$Outbound = {
  message: string;
  user_id: string;
};

/** @internal */
export const RegisterResponse$outboundSchema: z.ZodType<
  RegisterResponse$Outbound,
  z.ZodTypeDef,
  RegisterResponse
> = z.object({
  message: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterResponse$ {
  /** @deprecated use `RegisterResponse$inboundSchema` instead. */
  export const inboundSchema = RegisterResponse$inboundSchema;
  /** @deprecated use `RegisterResponse$outboundSchema` instead. */
  export const outboundSchema = RegisterResponse$outboundSchema;
  /** @deprecated use `RegisterResponse$Outbound` instead. */
  export type Outbound = RegisterResponse$Outbound;
}

export function registerResponseToJSON(
  registerResponse: RegisterResponse,
): string {
  return JSON.stringify(
    RegisterResponse$outboundSchema.parse(registerResponse),
  );
}

export function registerResponseFromJSON(
  jsonString: string,
): SafeParseResult<RegisterResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterResponse' from JSON`,
  );
}
