/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request body for user login
 */
export type LoginRequest = {
  /**
   * Email address for login authentication
   */
  email: string;
  /**
   * User's password
   */
  password: string;
};

/** @internal */
export const LoginRequest$inboundSchema: z.ZodType<
  LoginRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  password: z.string(),
});

/** @internal */
export type LoginRequest$Outbound = {
  email: string;
  password: string;
};

/** @internal */
export const LoginRequest$outboundSchema: z.ZodType<
  LoginRequest$Outbound,
  z.ZodTypeDef,
  LoginRequest
> = z.object({
  email: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LoginRequest$ {
  /** @deprecated use `LoginRequest$inboundSchema` instead. */
  export const inboundSchema = LoginRequest$inboundSchema;
  /** @deprecated use `LoginRequest$outboundSchema` instead. */
  export const outboundSchema = LoginRequest$outboundSchema;
  /** @deprecated use `LoginRequest$Outbound` instead. */
  export type Outbound = LoginRequest$Outbound;
}

export function loginRequestToJSON(loginRequest: LoginRequest): string {
  return JSON.stringify(LoginRequest$outboundSchema.parse(loginRequest));
}

export function loginRequestFromJSON(
  jsonString: string,
): SafeParseResult<LoginRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LoginRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LoginRequest' from JSON`,
  );
}
