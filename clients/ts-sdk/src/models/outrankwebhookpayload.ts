/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Webhook payload from Outrank SEO service
 */
export type OutrankWebhookPayload = {
  data?: { [k: string]: any } | null | undefined;
  /**
   * Event type from Outrank
   */
  eventType?: string | null | undefined;
};

/** @internal */
export const OutrankWebhookPayload$inboundSchema: z.ZodType<
  OutrankWebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.record(z.any())).optional(),
  eventType: z.nullable(z.string()).optional(),
});

/** @internal */
export type OutrankWebhookPayload$Outbound = {
  data?: { [k: string]: any } | null | undefined;
  eventType?: string | null | undefined;
};

/** @internal */
export const OutrankWebhookPayload$outboundSchema: z.ZodType<
  OutrankWebhookPayload$Outbound,
  z.ZodTypeDef,
  OutrankWebhookPayload
> = z.object({
  data: z.nullable(z.record(z.any())).optional(),
  eventType: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutrankWebhookPayload$ {
  /** @deprecated use `OutrankWebhookPayload$inboundSchema` instead. */
  export const inboundSchema = OutrankWebhookPayload$inboundSchema;
  /** @deprecated use `OutrankWebhookPayload$outboundSchema` instead. */
  export const outboundSchema = OutrankWebhookPayload$outboundSchema;
  /** @deprecated use `OutrankWebhookPayload$Outbound` instead. */
  export type Outbound = OutrankWebhookPayload$Outbound;
}

export function outrankWebhookPayloadToJSON(
  outrankWebhookPayload: OutrankWebhookPayload,
): string {
  return JSON.stringify(
    OutrankWebhookPayload$outboundSchema.parse(outrankWebhookPayload),
  );
}

export function outrankWebhookPayloadFromJSON(
  jsonString: string,
): SafeParseResult<OutrankWebhookPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutrankWebhookPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutrankWebhookPayload' from JSON`,
  );
}
