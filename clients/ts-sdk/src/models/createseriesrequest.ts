/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request payload for creating a new series with content and metadata
 */
export type CreateSeriesRequest = {
  /**
   * Category or genre of the series (optional)
   */
  category?: string | null | undefined;
  /**
   * Banner image URL for the series homepage
   */
  coverImageUrl?: string | null | undefined;
  /**
   * Description of the series content and purpose (optional)
   */
  description?: string | null | undefined;
  /**
   * Enable monetization features for this series
   */
  isMonetized?: boolean | null | undefined;
  /**
   * Make this series visible to the public upon creation
   */
  isPublished?: boolean | null | undefined;
  /**
   * Subscription tier required to access the series
   */
  pricingTier?: string | null | undefined;
  /**
   * Unique URL path segment for the new series
   */
  slug: string;
  /**
   * Name for the new series being created
   */
  title: string;
};

/** @internal */
export const CreateSeriesRequest$inboundSchema: z.ZodType<
  CreateSeriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: z.nullable(z.string()).optional(),
  coverImageUrl: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  isMonetized: z.nullable(z.boolean()).optional(),
  isPublished: z.nullable(z.boolean()).optional(),
  pricingTier: z.nullable(z.string()).optional(),
  slug: z.string(),
  title: z.string(),
});

/** @internal */
export type CreateSeriesRequest$Outbound = {
  category?: string | null | undefined;
  coverImageUrl?: string | null | undefined;
  description?: string | null | undefined;
  isMonetized?: boolean | null | undefined;
  isPublished?: boolean | null | undefined;
  pricingTier?: string | null | undefined;
  slug: string;
  title: string;
};

/** @internal */
export const CreateSeriesRequest$outboundSchema: z.ZodType<
  CreateSeriesRequest$Outbound,
  z.ZodTypeDef,
  CreateSeriesRequest
> = z.object({
  category: z.nullable(z.string()).optional(),
  coverImageUrl: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  isMonetized: z.nullable(z.boolean()).optional(),
  isPublished: z.nullable(z.boolean()).optional(),
  pricingTier: z.nullable(z.string()).optional(),
  slug: z.string(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesRequest$ {
  /** @deprecated use `CreateSeriesRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesRequest$inboundSchema;
  /** @deprecated use `CreateSeriesRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesRequest$outboundSchema;
  /** @deprecated use `CreateSeriesRequest$Outbound` instead. */
  export type Outbound = CreateSeriesRequest$Outbound;
}

export function createSeriesRequestToJSON(
  createSeriesRequest: CreateSeriesRequest,
): string {
  return JSON.stringify(
    CreateSeriesRequest$outboundSchema.parse(createSeriesRequest),
  );
}

export function createSeriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSeriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSeriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSeriesRequest' from JSON`,
  );
}
