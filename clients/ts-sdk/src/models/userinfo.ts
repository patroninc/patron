/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AuthProvider,
  AuthProvider$inboundSchema,
  AuthProvider$outboundSchema,
} from "./authprovider.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * User information for API responses and internal use
 */
export type UserInfo = {
  /**
   * Authentication provider types supported by the system
   */
  authProvider: AuthProvider;
  /**
   * URL to user's avatar image
   */
  avatarUrl?: string | null | undefined;
  /**
   * User account creation timestamp
   */
  createdAt?: Date | null | undefined;
  /**
   * User's display name
   */
  displayName?: string | null | undefined;
  /**
   * User's registered email address
   */
  email: string;
  /**
   * Whether the user's email has been verified
   */
  emailVerified: boolean;
  /**
   * User's unique identifier
   */
  id: string;
  /**
   * Timestamp of user's last login
   */
  lastLogin?: Date | null | undefined;
};

/** @internal */
export const UserInfo$inboundSchema: z.ZodType<
  UserInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  auth_provider: AuthProvider$inboundSchema,
  avatar_url: z.nullable(z.string()).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  display_name: z.nullable(z.string()).optional(),
  email: z.string(),
  email_verified: z.boolean(),
  id: z.string(),
  last_login: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "auth_provider": "authProvider",
    "avatar_url": "avatarUrl",
    "created_at": "createdAt",
    "display_name": "displayName",
    "email_verified": "emailVerified",
    "last_login": "lastLogin",
  });
});

/** @internal */
export type UserInfo$Outbound = {
  auth_provider: string;
  avatar_url?: string | null | undefined;
  created_at?: string | null | undefined;
  display_name?: string | null | undefined;
  email: string;
  email_verified: boolean;
  id: string;
  last_login?: string | null | undefined;
};

/** @internal */
export const UserInfo$outboundSchema: z.ZodType<
  UserInfo$Outbound,
  z.ZodTypeDef,
  UserInfo
> = z.object({
  authProvider: AuthProvider$outboundSchema,
  avatarUrl: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  displayName: z.nullable(z.string()).optional(),
  email: z.string(),
  emailVerified: z.boolean(),
  id: z.string(),
  lastLogin: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    authProvider: "auth_provider",
    avatarUrl: "avatar_url",
    createdAt: "created_at",
    displayName: "display_name",
    emailVerified: "email_verified",
    lastLogin: "last_login",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserInfo$ {
  /** @deprecated use `UserInfo$inboundSchema` instead. */
  export const inboundSchema = UserInfo$inboundSchema;
  /** @deprecated use `UserInfo$outboundSchema` instead. */
  export const outboundSchema = UserInfo$outboundSchema;
  /** @deprecated use `UserInfo$Outbound` instead. */
  export type Outbound = UserInfo$Outbound;
}

export function userInfoToJSON(userInfo: UserInfo): string {
  return JSON.stringify(UserInfo$outboundSchema.parse(userInfo));
}

export function userInfoFromJSON(
  jsonString: string,
): SafeParseResult<UserInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserInfo' from JSON`,
  );
}
