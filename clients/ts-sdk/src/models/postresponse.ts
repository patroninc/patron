/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * API response model for posts
 */
export type PostResponse = {
  /**
   * ID of associated audio file
   */
  audioFileId?: string | null | undefined;
  /**
   * Post body text and content
   */
  content: string;
  /**
   * Post creation timestamp
   */
  createdAt?: Date | null | undefined;
  /**
   * Post's unique identifier
   */
  id: string;
  /**
   * Whether the post requires premium access
   */
  isPremium: boolean;
  /**
   * Whether the post is published and visible to users
   */
  isPublished: boolean;
  /**
   * Position number for ordering this post within its parent series
   */
  postNumber: number;
  /**
   * Parent series identifier
   */
  seriesId: string;
  /**
   * SEO-friendly URL identifier for the post
   */
  slug: string;
  /**
   * URL to the post's thumbnail image
   */
  thumbnailUrl?: string | null | undefined;
  /**
   * Post display title
   */
  title: string;
  /**
   * Post last update timestamp
   */
  updatedAt?: Date | null | undefined;
  /**
   * ID of associated video file
   */
  videoFileId?: string | null | undefined;
};

/** @internal */
export const PostResponse$inboundSchema: z.ZodType<
  PostResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  audioFileId: z.nullable(z.string()).optional(),
  content: z.string(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.string(),
  isPremium: z.boolean(),
  isPublished: z.boolean(),
  postNumber: z.number().int(),
  seriesId: z.string(),
  slug: z.string(),
  thumbnailUrl: z.nullable(z.string()).optional(),
  title: z.string(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  videoFileId: z.nullable(z.string()).optional(),
});

/** @internal */
export type PostResponse$Outbound = {
  audioFileId?: string | null | undefined;
  content: string;
  createdAt?: string | null | undefined;
  id: string;
  isPremium: boolean;
  isPublished: boolean;
  postNumber: number;
  seriesId: string;
  slug: string;
  thumbnailUrl?: string | null | undefined;
  title: string;
  updatedAt?: string | null | undefined;
  videoFileId?: string | null | undefined;
};

/** @internal */
export const PostResponse$outboundSchema: z.ZodType<
  PostResponse$Outbound,
  z.ZodTypeDef,
  PostResponse
> = z.object({
  audioFileId: z.nullable(z.string()).optional(),
  content: z.string(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.string(),
  isPremium: z.boolean(),
  isPublished: z.boolean(),
  postNumber: z.number().int(),
  seriesId: z.string(),
  slug: z.string(),
  thumbnailUrl: z.nullable(z.string()).optional(),
  title: z.string(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  videoFileId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostResponse$ {
  /** @deprecated use `PostResponse$inboundSchema` instead. */
  export const inboundSchema = PostResponse$inboundSchema;
  /** @deprecated use `PostResponse$outboundSchema` instead. */
  export const outboundSchema = PostResponse$outboundSchema;
  /** @deprecated use `PostResponse$Outbound` instead. */
  export type Outbound = PostResponse$Outbound;
}

export function postResponseToJSON(postResponse: PostResponse): string {
  return JSON.stringify(PostResponse$outboundSchema.parse(postResponse));
}

export function postResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostResponse' from JSON`,
  );
}
