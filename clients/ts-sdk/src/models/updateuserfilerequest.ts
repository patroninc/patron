/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FileStatus,
  FileStatus$inboundSchema,
  FileStatus$outboundSchema,
} from "./filestatus.js";
import {
  Value,
  Value$inboundSchema,
  Value$Outbound,
  Value$outboundSchema,
} from "./value.js";

/**
 * Request payload for updating user file metadata, filename, or status
 */
export type UpdateUserFileRequest = {
  /**
   * New filename (optional)
   */
  filename?: string | null | undefined;
  metadata?: Value | null | undefined;
  status?: FileStatus | null | undefined;
};

/** @internal */
export const UpdateUserFileRequest$inboundSchema: z.ZodType<
  UpdateUserFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filename: z.nullable(z.string()).optional(),
  metadata: z.nullable(Value$inboundSchema).optional(),
  status: z.nullable(FileStatus$inboundSchema).optional(),
});

/** @internal */
export type UpdateUserFileRequest$Outbound = {
  filename?: string | null | undefined;
  metadata?: Value$Outbound | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const UpdateUserFileRequest$outboundSchema: z.ZodType<
  UpdateUserFileRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserFileRequest
> = z.object({
  filename: z.nullable(z.string()).optional(),
  metadata: z.nullable(Value$outboundSchema).optional(),
  status: z.nullable(FileStatus$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserFileRequest$ {
  /** @deprecated use `UpdateUserFileRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserFileRequest$inboundSchema;
  /** @deprecated use `UpdateUserFileRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserFileRequest$outboundSchema;
  /** @deprecated use `UpdateUserFileRequest$Outbound` instead. */
  export type Outbound = UpdateUserFileRequest$Outbound;
}

export function updateUserFileRequestToJSON(
  updateUserFileRequest: UpdateUserFileRequest,
): string {
  return JSON.stringify(
    UpdateUserFileRequest$outboundSchema.parse(updateUserFileRequest),
  );
}

export function updateUserFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserFileRequest' from JSON`,
  );
}
