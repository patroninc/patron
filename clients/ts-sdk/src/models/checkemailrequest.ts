/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request body for checking if email exists
 */
export type CheckEmailRequest = {
  /**
   * Email address to check
   */
  email: string;
};

/** @internal */
export const CheckEmailRequest$inboundSchema: z.ZodType<
  CheckEmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
});

/** @internal */
export type CheckEmailRequest$Outbound = {
  email: string;
};

/** @internal */
export const CheckEmailRequest$outboundSchema: z.ZodType<
  CheckEmailRequest$Outbound,
  z.ZodTypeDef,
  CheckEmailRequest
> = z.object({
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckEmailRequest$ {
  /** @deprecated use `CheckEmailRequest$inboundSchema` instead. */
  export const inboundSchema = CheckEmailRequest$inboundSchema;
  /** @deprecated use `CheckEmailRequest$outboundSchema` instead. */
  export const outboundSchema = CheckEmailRequest$outboundSchema;
  /** @deprecated use `CheckEmailRequest$Outbound` instead. */
  export type Outbound = CheckEmailRequest$Outbound;
}

export function checkEmailRequestToJSON(
  checkEmailRequest: CheckEmailRequest,
): string {
  return JSON.stringify(
    CheckEmailRequest$outboundSchema.parse(checkEmailRequest),
  );
}

export function checkEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<CheckEmailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckEmailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckEmailRequest' from JSON`,
  );
}
