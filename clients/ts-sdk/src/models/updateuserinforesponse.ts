/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  UserInfo,
  UserInfo$inboundSchema,
  UserInfo$Outbound,
  UserInfo$outboundSchema,
} from "./userinfo.js";

/**
 * Response for successful user information update
 */
export type UpdateUserInfoResponse = {
  /**
   * Update confirmation message
   */
  message: string;
  /**
   * User information for API responses and internal use
   */
  user: UserInfo;
};

/** @internal */
export const UpdateUserInfoResponse$inboundSchema: z.ZodType<
  UpdateUserInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  user: UserInfo$inboundSchema,
});

/** @internal */
export type UpdateUserInfoResponse$Outbound = {
  message: string;
  user: UserInfo$Outbound;
};

/** @internal */
export const UpdateUserInfoResponse$outboundSchema: z.ZodType<
  UpdateUserInfoResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserInfoResponse
> = z.object({
  message: z.string(),
  user: UserInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserInfoResponse$ {
  /** @deprecated use `UpdateUserInfoResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserInfoResponse$inboundSchema;
  /** @deprecated use `UpdateUserInfoResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserInfoResponse$outboundSchema;
  /** @deprecated use `UpdateUserInfoResponse$Outbound` instead. */
  export type Outbound = UpdateUserInfoResponse$Outbound;
}

export function updateUserInfoResponseToJSON(
  updateUserInfoResponse: UpdateUserInfoResponse,
): string {
  return JSON.stringify(
    UpdateUserInfoResponse$outboundSchema.parse(updateUserInfoResponse),
  );
}

export function updateUserInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserInfoResponse' from JSON`,
  );
}
