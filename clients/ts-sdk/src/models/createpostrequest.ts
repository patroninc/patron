/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request payload for creating a new post with content and metadata
 */
export type CreatePostRequest = {
  /**
   * Optional audio file attachment for the post
   */
  audioFileId?: string | null | undefined;
  /**
   * Full content of the post
   */
  content: string;
  /**
   * Restrict this post to premium subscribers only
   */
  isPremium?: boolean | null | undefined;
  /**
   * Publish this post immediately upon creation
   */
  isPublished?: boolean | null | undefined;
  /**
   * Episode or post number for sequencing content within the series
   */
  postNumber: number;
  /**
   * Series to add this post to
   */
  seriesId: string;
  /**
   * Unique URL path segment for the new post
   */
  slug: string;
  /**
   * Cover image URL for the post preview
   */
  thumbnailUrl?: string | null | undefined;
  /**
   * Post title for display
   */
  title: string;
  /**
   * Optional video file attachment for the post
   */
  videoFileId?: string | null | undefined;
};

/** @internal */
export const CreatePostRequest$inboundSchema: z.ZodType<
  CreatePostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  audioFileId: z.nullable(z.string()).optional(),
  content: z.string(),
  isPremium: z.nullable(z.boolean()).optional(),
  isPublished: z.nullable(z.boolean()).optional(),
  postNumber: z.number().int(),
  seriesId: z.string(),
  slug: z.string(),
  thumbnailUrl: z.nullable(z.string()).optional(),
  title: z.string(),
  videoFileId: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreatePostRequest$Outbound = {
  audioFileId?: string | null | undefined;
  content: string;
  isPremium?: boolean | null | undefined;
  isPublished?: boolean | null | undefined;
  postNumber: number;
  seriesId: string;
  slug: string;
  thumbnailUrl?: string | null | undefined;
  title: string;
  videoFileId?: string | null | undefined;
};

/** @internal */
export const CreatePostRequest$outboundSchema: z.ZodType<
  CreatePostRequest$Outbound,
  z.ZodTypeDef,
  CreatePostRequest
> = z.object({
  audioFileId: z.nullable(z.string()).optional(),
  content: z.string(),
  isPremium: z.nullable(z.boolean()).optional(),
  isPublished: z.nullable(z.boolean()).optional(),
  postNumber: z.number().int(),
  seriesId: z.string(),
  slug: z.string(),
  thumbnailUrl: z.nullable(z.string()).optional(),
  title: z.string(),
  videoFileId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePostRequest$ {
  /** @deprecated use `CreatePostRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePostRequest$inboundSchema;
  /** @deprecated use `CreatePostRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePostRequest$outboundSchema;
  /** @deprecated use `CreatePostRequest$Outbound` instead. */
  export type Outbound = CreatePostRequest$Outbound;
}

export function createPostRequestToJSON(
  createPostRequest: CreatePostRequest,
): string {
  return JSON.stringify(
    CreatePostRequest$outboundSchema.parse(createPostRequest),
  );
}

export function createPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePostRequest' from JSON`,
  );
}
