/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request body for password reset
 */
export type ForgotPasswordRequest = {
  /**
   * User's email address
   */
  email: string;
};

/** @internal */
export const ForgotPasswordRequest$inboundSchema: z.ZodType<
  ForgotPasswordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
});

/** @internal */
export type ForgotPasswordRequest$Outbound = {
  email: string;
};

/** @internal */
export const ForgotPasswordRequest$outboundSchema: z.ZodType<
  ForgotPasswordRequest$Outbound,
  z.ZodTypeDef,
  ForgotPasswordRequest
> = z.object({
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForgotPasswordRequest$ {
  /** @deprecated use `ForgotPasswordRequest$inboundSchema` instead. */
  export const inboundSchema = ForgotPasswordRequest$inboundSchema;
  /** @deprecated use `ForgotPasswordRequest$outboundSchema` instead. */
  export const outboundSchema = ForgotPasswordRequest$outboundSchema;
  /** @deprecated use `ForgotPasswordRequest$Outbound` instead. */
  export type Outbound = ForgotPasswordRequest$Outbound;
}

export function forgotPasswordRequestToJSON(
  forgotPasswordRequest: ForgotPasswordRequest,
): string {
  return JSON.stringify(
    ForgotPasswordRequest$outboundSchema.parse(forgotPasswordRequest),
  );
}

export function forgotPasswordRequestFromJSON(
  jsonString: string,
): SafeParseResult<ForgotPasswordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForgotPasswordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForgotPasswordRequest' from JSON`,
  );
}
