/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * API response model for series
 */
export type SeriesResponse = {
  /**
   * Category or genre of the series
   */
  category?: string | null | undefined;
  /**
   * URL to the series cover image
   */
  coverImageUrl?: string | null | undefined;
  /**
   * Series creation timestamp
   */
  createdAt?: Date | null | undefined;
  /**
   * Description of the series content and purpose
   */
  description?: string | null | undefined;
  /**
   * Series unique identifier
   */
  id: string;
  /**
   * Total number of posts in the series
   */
  length?: number | null | undefined;
  /**
   * SEO-friendly URL identifier for the series
   */
  slug: string;
  /**
   * Display name of the series
   */
  title: string;
  /**
   * Series last update timestamp
   */
  updatedAt?: Date | null | undefined;
  /**
   * ID of the user who owns this series
   */
  userId: string;
};

/** @internal */
export const SeriesResponse$inboundSchema: z.ZodType<
  SeriesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: z.nullable(z.string()).optional(),
  coverImageUrl: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.string(),
  length: z.nullable(z.number().int()).optional(),
  slug: z.string(),
  title: z.string(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.string(),
});

/** @internal */
export type SeriesResponse$Outbound = {
  category?: string | null | undefined;
  coverImageUrl?: string | null | undefined;
  createdAt?: string | null | undefined;
  description?: string | null | undefined;
  id: string;
  length?: number | null | undefined;
  slug: string;
  title: string;
  updatedAt?: string | null | undefined;
  userId: string;
};

/** @internal */
export const SeriesResponse$outboundSchema: z.ZodType<
  SeriesResponse$Outbound,
  z.ZodTypeDef,
  SeriesResponse
> = z.object({
  category: z.nullable(z.string()).optional(),
  coverImageUrl: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  description: z.nullable(z.string()).optional(),
  id: z.string(),
  length: z.nullable(z.number().int()).optional(),
  slug: z.string(),
  title: z.string(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeriesResponse$ {
  /** @deprecated use `SeriesResponse$inboundSchema` instead. */
  export const inboundSchema = SeriesResponse$inboundSchema;
  /** @deprecated use `SeriesResponse$outboundSchema` instead. */
  export const outboundSchema = SeriesResponse$outboundSchema;
  /** @deprecated use `SeriesResponse$Outbound` instead. */
  export type Outbound = SeriesResponse$Outbound;
}

export function seriesResponseToJSON(seriesResponse: SeriesResponse): string {
  return JSON.stringify(SeriesResponse$outboundSchema.parse(seriesResponse));
}

export function seriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<SeriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeriesResponse' from JSON`,
  );
}
