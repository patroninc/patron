/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FileStatus,
  FileStatus$inboundSchema,
  FileStatus$outboundSchema,
} from "./filestatus.js";
import {
  Value,
  Value$inboundSchema,
  Value$Outbound,
  Value$outboundSchema,
} from "./value.js";

/**
 * User file information for API responses
 */
export type UserFileInfo = {
  /**
   * File upload timestamp
   */
  createdAt?: Date | null | undefined;
  /**
   * SHA-256 hash of the file
   */
  fileHash: string;
  /**
   * Size of the file in bytes
   */
  fileSize: number;
  /**
   * Current filename
   */
  filename: string;
  /**
   * File's unique identifier
   */
  id: string;
  metadata?: Value | null | undefined;
  /**
   * MIME type of the file
   */
  mimeType: string;
  /**
   * Original filename as uploaded by user
   */
  originalFilename: string;
  /**
   * File processing status for user uploaded files
   */
  status: FileStatus;
  /**
   * File last update timestamp
   */
  updatedAt?: Date | null | undefined;
  /**
   * ID of the user who owns this file
   */
  userId: string;
};

/** @internal */
export const UserFileInfo$inboundSchema: z.ZodType<
  UserFileInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  file_hash: z.string(),
  file_size: z.number().int(),
  filename: z.string(),
  id: z.string(),
  metadata: z.nullable(Value$inboundSchema).optional(),
  mime_type: z.string(),
  original_filename: z.string(),
  status: FileStatus$inboundSchema,
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "file_hash": "fileHash",
    "file_size": "fileSize",
    "mime_type": "mimeType",
    "original_filename": "originalFilename",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type UserFileInfo$Outbound = {
  created_at?: string | null | undefined;
  file_hash: string;
  file_size: number;
  filename: string;
  id: string;
  metadata?: Value$Outbound | null | undefined;
  mime_type: string;
  original_filename: string;
  status: string;
  updated_at?: string | null | undefined;
  user_id: string;
};

/** @internal */
export const UserFileInfo$outboundSchema: z.ZodType<
  UserFileInfo$Outbound,
  z.ZodTypeDef,
  UserFileInfo
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  fileHash: z.string(),
  fileSize: z.number().int(),
  filename: z.string(),
  id: z.string(),
  metadata: z.nullable(Value$outboundSchema).optional(),
  mimeType: z.string(),
  originalFilename: z.string(),
  status: FileStatus$outboundSchema,
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    fileHash: "file_hash",
    fileSize: "file_size",
    mimeType: "mime_type",
    originalFilename: "original_filename",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserFileInfo$ {
  /** @deprecated use `UserFileInfo$inboundSchema` instead. */
  export const inboundSchema = UserFileInfo$inboundSchema;
  /** @deprecated use `UserFileInfo$outboundSchema` instead. */
  export const outboundSchema = UserFileInfo$outboundSchema;
  /** @deprecated use `UserFileInfo$Outbound` instead. */
  export type Outbound = UserFileInfo$Outbound;
}

export function userFileInfoToJSON(userFileInfo: UserFileInfo): string {
  return JSON.stringify(UserFileInfo$outboundSchema.parse(userFileInfo));
}

export function userFileInfoFromJSON(
  jsonString: string,
): SafeParseResult<UserFileInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserFileInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserFileInfo' from JSON`,
  );
}
