/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * API response model for API keys (excludes sensitive hash)
 */
export type ApiKeyResponse = {
  /**
   * When this API key was originally created
   */
  createdAt?: Date | null | undefined;
  /**
   * Expiration timestamp after which key becomes invalid
   */
  expiresAt?: Date | null | undefined;
  /**
   * Unique identifier for this API key in responses
   */
  id: string;
  /**
   * Current activation status of this API key
   */
  isActive: boolean;
  /**
   * Key prefix for visual identification in API key lists
   */
  keyPrefix: string;
  /**
   * Timestamp when the key was last used
   */
  lastUsedAt?: Date | null | undefined;
  /**
   * Descriptive name for this API key
   */
  name: string;
  /**
   * Permissions granted to this API key for resource access
   */
  permissions: Array<string>;
  /**
   * API key last update timestamp
   */
  updatedAt?: Date | null | undefined;
  /**
   * Owner user identifier
   */
  userId: string;
};

/** @internal */
export const ApiKeyResponse$inboundSchema: z.ZodType<
  ApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  expiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.string(),
  isActive: z.boolean(),
  keyPrefix: z.string(),
  lastUsedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  name: z.string(),
  permissions: z.array(z.string()),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  userId: z.string(),
});

/** @internal */
export type ApiKeyResponse$Outbound = {
  createdAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  id: string;
  isActive: boolean;
  keyPrefix: string;
  lastUsedAt?: string | null | undefined;
  name: string;
  permissions: Array<string>;
  updatedAt?: string | null | undefined;
  userId: string;
};

/** @internal */
export const ApiKeyResponse$outboundSchema: z.ZodType<
  ApiKeyResponse$Outbound,
  z.ZodTypeDef,
  ApiKeyResponse
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.string(),
  isActive: z.boolean(),
  keyPrefix: z.string(),
  lastUsedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  name: z.string(),
  permissions: z.array(z.string()),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKeyResponse$ {
  /** @deprecated use `ApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = ApiKeyResponse$inboundSchema;
  /** @deprecated use `ApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = ApiKeyResponse$outboundSchema;
  /** @deprecated use `ApiKeyResponse$Outbound` instead. */
  export type Outbound = ApiKeyResponse$Outbound;
}

export function apiKeyResponseToJSON(apiKeyResponse: ApiKeyResponse): string {
  return JSON.stringify(ApiKeyResponse$outboundSchema.parse(apiKeyResponse));
}

export function apiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiKeyResponse' from JSON`,
  );
}
