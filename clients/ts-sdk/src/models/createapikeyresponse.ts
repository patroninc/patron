/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Response when creating a new API key - includes the actual key value
 */
export type CreateApiKeyResponse = {
  /**
   * Timestamp of when the API key was just created
   */
  createdAt?: Date | null | undefined;
  /**
   * Key expiration date (when provided)
   */
  expiresAt?: Date | null | undefined;
  /**
   * UUID of the newly created API key
   */
  id: string;
  /**
   * Initial active status of the new API key
   */
  isActive: boolean;
  /**
   * The actual API key value (only shown once during creation)
   */
  key: string;
  /**
   * Prefix portion of the newly generated key
   */
  keyPrefix: string;
  /**
   * Display name shown for this API key
   */
  name: string;
  /**
   * Permissions assigned to the new API key
   */
  permissions: Array<string>;
};

/** @internal */
export const CreateApiKeyResponse$inboundSchema: z.ZodType<
  CreateApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  expiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.string(),
  isActive: z.boolean(),
  key: z.string(),
  keyPrefix: z.string(),
  name: z.string(),
  permissions: z.array(z.string()),
});

/** @internal */
export type CreateApiKeyResponse$Outbound = {
  createdAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  id: string;
  isActive: boolean;
  key: string;
  keyPrefix: string;
  name: string;
  permissions: Array<string>;
};

/** @internal */
export const CreateApiKeyResponse$outboundSchema: z.ZodType<
  CreateApiKeyResponse$Outbound,
  z.ZodTypeDef,
  CreateApiKeyResponse
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  id: z.string(),
  isActive: z.boolean(),
  key: z.string(),
  keyPrefix: z.string(),
  name: z.string(),
  permissions: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyResponse$ {
  /** @deprecated use `CreateApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyResponse$inboundSchema;
  /** @deprecated use `CreateApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = CreateApiKeyResponse$outboundSchema;
  /** @deprecated use `CreateApiKeyResponse$Outbound` instead. */
  export type Outbound = CreateApiKeyResponse$Outbound;
}

export function createApiKeyResponseToJSON(
  createApiKeyResponse: CreateApiKeyResponse,
): string {
  return JSON.stringify(
    CreateApiKeyResponse$outboundSchema.parse(createApiKeyResponse),
  );
}

export function createApiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKeyResponse' from JSON`,
  );
}
