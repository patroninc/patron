/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  UserFileInfo,
  UserFileInfo$inboundSchema,
  UserFileInfo$Outbound,
  UserFileInfo$outboundSchema,
} from "./userfileinfo.js";

/**
 * Response for file upload operations
 */
export type FileUploadResponse = {
  /**
   * User file information for API responses
   */
  file: UserFileInfo;
  /**
   * Upload confirmation message
   */
  message: string;
};

/** @internal */
export const FileUploadResponse$inboundSchema: z.ZodType<
  FileUploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: UserFileInfo$inboundSchema,
  message: z.string(),
});

/** @internal */
export type FileUploadResponse$Outbound = {
  file: UserFileInfo$Outbound;
  message: string;
};

/** @internal */
export const FileUploadResponse$outboundSchema: z.ZodType<
  FileUploadResponse$Outbound,
  z.ZodTypeDef,
  FileUploadResponse
> = z.object({
  file: UserFileInfo$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUploadResponse$ {
  /** @deprecated use `FileUploadResponse$inboundSchema` instead. */
  export const inboundSchema = FileUploadResponse$inboundSchema;
  /** @deprecated use `FileUploadResponse$outboundSchema` instead. */
  export const outboundSchema = FileUploadResponse$outboundSchema;
  /** @deprecated use `FileUploadResponse$Outbound` instead. */
  export type Outbound = FileUploadResponse$Outbound;
}

export function fileUploadResponseToJSON(
  fileUploadResponse: FileUploadResponse,
): string {
  return JSON.stringify(
    FileUploadResponse$outboundSchema.parse(fileUploadResponse),
  );
}

export function fileUploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<FileUploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUploadResponse' from JSON`,
  );
}
