/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request payload for creating a new API key
 */
export type CreateApiKeyRequest = {
  /**
   * When the API key should expire (optional)
   */
  expiresAt?: Date | null | undefined;
  /**
   * Name identifier for the new API key
   */
  name: string;
  /**
   * Array of permissions to grant to this key
   */
  permissions?: Array<string> | null | undefined;
};

/** @internal */
export const CreateApiKeyRequest$inboundSchema: z.ZodType<
  CreateApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  name: z.string(),
  permissions: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type CreateApiKeyRequest$Outbound = {
  expiresAt?: string | null | undefined;
  name: string;
  permissions?: Array<string> | null | undefined;
};

/** @internal */
export const CreateApiKeyRequest$outboundSchema: z.ZodType<
  CreateApiKeyRequest$Outbound,
  z.ZodTypeDef,
  CreateApiKeyRequest
> = z.object({
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  name: z.string(),
  permissions: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyRequest$ {
  /** @deprecated use `CreateApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyRequest$inboundSchema;
  /** @deprecated use `CreateApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = CreateApiKeyRequest$outboundSchema;
  /** @deprecated use `CreateApiKeyRequest$Outbound` instead. */
  export type Outbound = CreateApiKeyRequest$Outbound;
}

export function createApiKeyRequestToJSON(
  createApiKeyRequest: CreateApiKeyRequest,
): string {
  return JSON.stringify(
    CreateApiKeyRequest$outboundSchema.parse(createApiKeyRequest),
  );
}

export function createApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKeyRequest' from JSON`,
  );
}
