/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request body for password reset confirmation
 */
export type ResetPasswordRequest = {
  /**
   * New password (minimum 8 characters)
   */
  newPassword: string;
  /**
   * Password reset token
   */
  token: string;
};

/** @internal */
export const ResetPasswordRequest$inboundSchema: z.ZodType<
  ResetPasswordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  new_password: z.string(),
  token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "new_password": "newPassword",
  });
});

/** @internal */
export type ResetPasswordRequest$Outbound = {
  new_password: string;
  token: string;
};

/** @internal */
export const ResetPasswordRequest$outboundSchema: z.ZodType<
  ResetPasswordRequest$Outbound,
  z.ZodTypeDef,
  ResetPasswordRequest
> = z.object({
  newPassword: z.string(),
  token: z.string(),
}).transform((v) => {
  return remap$(v, {
    newPassword: "new_password",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResetPasswordRequest$ {
  /** @deprecated use `ResetPasswordRequest$inboundSchema` instead. */
  export const inboundSchema = ResetPasswordRequest$inboundSchema;
  /** @deprecated use `ResetPasswordRequest$outboundSchema` instead. */
  export const outboundSchema = ResetPasswordRequest$outboundSchema;
  /** @deprecated use `ResetPasswordRequest$Outbound` instead. */
  export type Outbound = ResetPasswordRequest$Outbound;
}

export function resetPasswordRequestToJSON(
  resetPasswordRequest: ResetPasswordRequest,
): string {
  return JSON.stringify(
    ResetPasswordRequest$outboundSchema.parse(resetPasswordRequest),
  );
}

export function resetPasswordRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResetPasswordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResetPasswordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResetPasswordRequest' from JSON`,
  );
}
