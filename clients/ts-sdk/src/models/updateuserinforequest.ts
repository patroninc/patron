/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request body for updating user information
 */
export type UpdateUserInfoRequest = {
  /**
   * Updated avatar URL for the user
   */
  avatarUrl?: string | null | undefined;
  /**
   * Updated description for the user
   */
  description?: string | null | undefined;
  /**
   * Updated display name for the user
   */
  displayName?: string | null | undefined;
};

/** @internal */
export const UpdateUserInfoRequest$inboundSchema: z.ZodType<
  UpdateUserInfoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatarUrl: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateUserInfoRequest$Outbound = {
  avatarUrl?: string | null | undefined;
  description?: string | null | undefined;
  displayName?: string | null | undefined;
};

/** @internal */
export const UpdateUserInfoRequest$outboundSchema: z.ZodType<
  UpdateUserInfoRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserInfoRequest
> = z.object({
  avatarUrl: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserInfoRequest$ {
  /** @deprecated use `UpdateUserInfoRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserInfoRequest$inboundSchema;
  /** @deprecated use `UpdateUserInfoRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserInfoRequest$outboundSchema;
  /** @deprecated use `UpdateUserInfoRequest$Outbound` instead. */
  export type Outbound = UpdateUserInfoRequest$Outbound;
}

export function updateUserInfoRequestToJSON(
  updateUserInfoRequest: UpdateUserInfoRequest,
): string {
  return JSON.stringify(
    UpdateUserInfoRequest$outboundSchema.parse(updateUserInfoRequest),
  );
}

export function updateUserInfoRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserInfoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserInfoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserInfoRequest' from JSON`,
  );
}
