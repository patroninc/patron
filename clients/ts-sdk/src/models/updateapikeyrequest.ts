/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Request payload for updating an API key
 */
export type UpdateApiKeyRequest = {
  /**
   * Update the expiration date
   */
  expiresAt?: Date | null | undefined;
  /**
   * Change the active status of the key
   */
  isActive?: boolean | null | undefined;
  /**
   * New name for the API key (optional)
   */
  name?: string | null | undefined;
  /**
   * Updated permissions array (optional)
   */
  permissions?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateApiKeyRequest$inboundSchema: z.ZodType<
  UpdateApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expiresAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  isActive: z.nullable(z.boolean()).optional(),
  name: z.nullable(z.string()).optional(),
  permissions: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type UpdateApiKeyRequest$Outbound = {
  expiresAt?: string | null | undefined;
  isActive?: boolean | null | undefined;
  name?: string | null | undefined;
  permissions?: Array<string> | null | undefined;
};

/** @internal */
export const UpdateApiKeyRequest$outboundSchema: z.ZodType<
  UpdateApiKeyRequest$Outbound,
  z.ZodTypeDef,
  UpdateApiKeyRequest
> = z.object({
  expiresAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  isActive: z.nullable(z.boolean()).optional(),
  name: z.nullable(z.string()).optional(),
  permissions: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApiKeyRequest$ {
  /** @deprecated use `UpdateApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateApiKeyRequest$inboundSchema;
  /** @deprecated use `UpdateApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateApiKeyRequest$outboundSchema;
  /** @deprecated use `UpdateApiKeyRequest$Outbound` instead. */
  export type Outbound = UpdateApiKeyRequest$Outbound;
}

export function updateApiKeyRequestToJSON(
  updateApiKeyRequest: UpdateApiKeyRequest,
): string {
  return JSON.stringify(
    UpdateApiKeyRequest$outboundSchema.parse(updateApiKeyRequest),
  );
}

export function updateApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApiKeyRequest' from JSON`,
  );
}
