/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Simplified user information for public API responses
 */
export type UserInfoResponse = {
  /**
   * Registration date and time
   */
  createdAt?: Date | null | undefined;
  /**
   * User's current email address
   */
  email: string;
  /**
   * User identifier for API responses
   */
  id: string;
};

/** @internal */
export const UserInfoResponse$inboundSchema: z.ZodType<
  UserInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  email: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type UserInfoResponse$Outbound = {
  created_at?: string | null | undefined;
  email: string;
  id: string;
};

/** @internal */
export const UserInfoResponse$outboundSchema: z.ZodType<
  UserInfoResponse$Outbound,
  z.ZodTypeDef,
  UserInfoResponse
> = z.object({
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  email: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserInfoResponse$ {
  /** @deprecated use `UserInfoResponse$inboundSchema` instead. */
  export const inboundSchema = UserInfoResponse$inboundSchema;
  /** @deprecated use `UserInfoResponse$outboundSchema` instead. */
  export const outboundSchema = UserInfoResponse$outboundSchema;
  /** @deprecated use `UserInfoResponse$Outbound` instead. */
  export type Outbound = UserInfoResponse$Outbound;
}

export function userInfoResponseToJSON(
  userInfoResponse: UserInfoResponse,
): string {
  return JSON.stringify(
    UserInfoResponse$outboundSchema.parse(userInfoResponse),
  );
}

export function userInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserInfoResponse' from JSON`,
  );
}
