{
  "openapi": "3.1.0",
  "info": {
    "title": "CelebAI Video Generation API",
    "description": "AI-powered celebrity video generation platform that creates personalized videos with lip-sync technology",
    "contact": {
      "name": "CelebAI Team",
      "email": "support@celebai.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    },
    {
      "url": "https://api.celebai.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/auth/forgot-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Forgot password",
        "operationId": "forgot_password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset email sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/google": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google OAuth redirect",
        "operationId": "google_auth_redirect",
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth consent screen"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/google/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Google OAuth callback",
        "operationId": "google_auth_callback",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Authorization code from Google",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "State parameter for CSRF protection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to frontend application"
          },
          "400": {
            "description": "Invalid authorization code or state",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials or email not verified",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get current user info",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User registration",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or email already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset password",
        "operationId": "reset_password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid token or password",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify-email": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Email verification",
        "operationId": "verify_email",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Email verification token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to frontend after verification"
          },
          "400": {
            "description": "Invalid or expired token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/celebs": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get All Characters",
        "description": "Returns a list of all available characters that can be used for video generation.\n\n# Errors\n\nReturns a [`ServiceError`] if the database query fails.",
        "operationId": "get_all_characters",
        "responses": {
          "200": {
            "description": "List of all available characters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharactersResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/characters/{character_id}/clips": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get Clips for Character",
        "description": "Returns all available video clips for a specific character.\n\n# Errors\n\nReturns a [`ServiceError`] if the database query fails or the character is not found.",
        "operationId": "get_clips_for_character",
        "parameters": [
          {
            "name": "character_id",
            "in": "path",
            "description": "The character ID to get clips for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of clips for the specified character",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClipsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Character not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/generate/audio": {
      "post": {
        "tags": [
          "Generation"
        ],
        "summary": "Generate Audio Clip",
        "description": "Creates a new audio clip using text-to-speech with the specified character voice.\nThe generated audio is uploaded to S3 and a pre-signed URL is returned.\n\n# Errors\n\nReturns a [`ServiceError`] if the character is not found, if audio generation fails,\nif uploading to S3 fails, or if database operations fail.",
        "operationId": "generate_audio_clip",
        "parameters": [
          {
            "name": "user_session",
            "in": "cookie",
            "description": "Encrypted user session cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Audio generation request payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AudioGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Audio clip generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudioGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Character not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/generate/video": {
      "get": {
        "tags": [
          "Generation"
        ],
        "summary": "List User's Video Generations",
        "description": "Retrieves all video generations belonging to the authenticated user.\nReturns a list of generations with their current status and metadata.\n\n# Errors\n\nReturns a [`ServiceError`] if there is an error retrieving generations from the database.",
        "operationId": "list_user_generations",
        "parameters": [
          {
            "name": "user_session",
            "in": "cookie",
            "description": "Encrypted user session cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User generations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Generation"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Generation"
        ],
        "summary": "Generate Video with Lip Sync",
        "description": "Creates a new video generation by combining a video clip with an audio clip using AI lip-sync technology.\nThe request is processed asynchronously, and the generation status can be tracked using the returned generation ID.\n\n# Errors\n\nReturns a [`ServiceError`] if the audio clip, video clip, or any required resource cannot be found,\nor if there is an error during video generation or database operations.",
        "operationId": "generate_video_with_lip_sync",
        "parameters": [
          {
            "name": "user_session",
            "in": "cookie",
            "description": "Encrypted user session cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video generation request payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Video generation started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Generation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Clip or audio clip not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/generate/video/{id}": {
      "get": {
        "tags": [
          "Generation"
        ],
        "summary": "Get Video Generation Status",
        "description": "Retrieves the status and details of a video generation by its ID.\nIf the video has been generated successfully, includes a pre-signed S3 URL to access the video file.\n\n# Errors\n\nReturns a [`ServiceError`] if the generation is not found or if there is an error retrieving the video URL or database information.",
        "operationId": "get_video_generation_status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The generation ID to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user_session",
            "in": "cookie",
            "description": "Encrypted user session cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video generation details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoGenerationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Generation not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/webhook/latentsync": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "`LatentSync` Webhook Handler",
        "description": "Receives webhook notifications from LatentSync/Replicate when video generation completes.\nUpdates the generation status and downloads/stores the generated video when successful.\n\n# Errors\n\nReturns a [`ServiceError`] if the database operation fails, if the video download fails,\nor if uploading to S3 fails.\n\n# Panics\n\nPanics if the `output` or `error` fields are unexpectedly `None` when required by the status.",
        "operationId": "latentsync",
        "requestBody": {
          "description": "Webhook payload from LatentSync/Replicate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LatentSyncWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid webhook payload",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Generation not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AudioClip": {
        "type": "object",
        "required": [
          "id",
          "prompt",
          "character_id",
          "s3_key",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "character_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "prompt": {
            "type": "string"
          },
          "s3_key": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "character_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
          "created_at": "2024-01-01T00:00:00",
          "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
          "prompt": "Hello, this is a test voice generation",
          "s3_key": "audio_clips/audio_123.mp3",
          "updated_at": "2024-01-01T00:00:00"
        }
      },
      "AudioGenerationRequest": {
        "type": "object",
        "required": [
          "prompt",
          "character"
        ],
        "properties": {
          "character": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the character to use for voice generation"
          },
          "prompt": {
            "type": "string",
            "description": "The text prompt to generate audio for"
          }
        },
        "example": {
          "character": "d290f1ee-6c54-4b01-90e6-d701748f0851",
          "prompt": "Hello, this is a test voice generation for Peter Griffin"
        }
      },
      "AudioGenerationResponse": {
        "type": "object",
        "required": [
          "audio_clip",
          "s3_url"
        ],
        "properties": {
          "audio_clip": {
            "$ref": "#/components/schemas/AudioClip",
            "description": "The generated audio clip metadata"
          },
          "s3_url": {
            "type": "string",
            "description": "Pre-signed S3 URL to access the generated audio file"
          }
        },
        "example": {
          "audio_clip": {
            "character_id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "created_at": "2024-01-01T00:00:00",
            "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
            "prompt": "Hello, this is a test voice generation for Peter Griffin",
            "s3_key": "audio_clips/audio_123.mp3",
            "updated_at": "2024-01-01T00:00:00"
          },
          "s3_url": "https://celebrities-ai.s3.amazonaws.com/audio_clips/audio_123.mp3?presigned=true"
        }
      },
      "AuthCallbackQuery": {
        "type": "object",
        "required": [
          "code",
          "state"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "example": {
          "code": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7",
          "state": "3d6f3e72-7e68-4f53-a8e7-2c5e8f7b3f1a"
        }
      },
      "AuthProvider": {
        "type": "string",
        "enum": [
          "google",
          "email",
          "both"
        ]
      },
      "Character": {
        "type": "object",
        "required": [
          "id",
          "name",
          "voice_id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "voice_id": {
            "type": "string"
          }
        },
        "example": {
          "created_at": "2024-01-01T00:00:00",
          "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
          "name": "Peter Griffin",
          "updated_at": "2024-01-01T00:00:00",
          "voice_id": "EXAVITQu4vr4xnSDxMaL"
        }
      },
      "CharactersResponse": {
        "type": "object",
        "required": [
          "characters"
        ],
        "properties": {
          "characters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Character"
            }
          }
        },
        "example": [
          {
            "created_at": "2024-01-01T00:00:00",
            "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "name": "Peter Griffin",
            "updated_at": "2024-01-01T00:00:00",
            "voice_id": "EXAVITQu4vr4xnSDxMaL"
          },
          {
            "created_at": "2024-01-01T00:00:00",
            "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "name": "Drake",
            "updated_at": "2024-01-01T00:00:00",
            "voice_id": "pNInz6obpgDQGcFmaJgB"
          }
        ]
      },
      "Clip": {
        "type": "object",
        "required": [
          "id",
          "s3_key",
          "celeb_id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "celeb_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "s3_key": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "celeb_id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
          "created_at": "2024-01-01T00:00:00",
          "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
          "s3_key": "clips/peter_griffin_dance.mp4",
          "updated_at": "2024-01-01T00:00:00"
        }
      },
      "ClipsResponse": {
        "type": "object",
        "required": [
          "clips"
        ],
        "properties": {
          "clips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Clip"
            }
          }
        },
        "example": [
          {
            "celeb_id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "created_at": "2024-01-01T00:00:00",
            "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "s3_key": "clips/peter_griffin_dance.mp4",
            "updated_at": "2024-01-01T00:00:00"
          },
          {
            "celeb_id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "created_at": "2024-01-01T00:00:00",
            "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
            "s3_key": "clips/peter_griffin_wave.mp4",
            "updated_at": "2024-01-01T00:00:00"
          }
        ]
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "example": {
          "email": "user@example.com"
        }
      },
      "ForgotPasswordResponse": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "If the email exists in our system, a password reset link has been sent."
        }
      },
      "Generation": {
        "type": "object",
        "required": [
          "id",
          "clip_id",
          "character_id",
          "status",
          "created_at",
          "updated_at",
          "audio_clip_id",
          "prediction_id"
        ],
        "properties": {
          "audio_clip_id": {
            "type": "string",
            "format": "uuid"
          },
          "character_id": {
            "type": "string",
            "format": "uuid"
          },
          "clip_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "prediction_id": {
            "type": "string"
          },
          "s3_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "audio_clip_id": "12345678-90ab-cdef-1234-567890abcdef",
          "character_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
          "clip_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
          "created_at": "2024-01-01T00:00:00",
          "error": null,
          "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
          "prediction_id": "latentsync_pred_12345",
          "s3_key": "generations/video_123.mp4",
          "status": "completed",
          "updated_at": "2024-01-01T00:05:00"
        }
      },
      "LatentSyncWebhookRequest": {
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "error": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error message (present when status is failed)"
          },
          "id": {
            "type": "string",
            "description": "The prediction ID from LatentSync/Replicate"
          },
          "output": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL to the generated video file (present when status is succeeded)"
          },
          "status": {
            "type": "string",
            "description": "Status of the video generation: pending, processing, succeeded, failed"
          }
        },
        "example": {
          "error": null,
          "id": "latentsync_pred_12345",
          "output": "https://replicate.delivery/pbxt/abc123/output.mp4",
          "status": "succeeded"
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "email": "user@example.com",
          "password": "password123"
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": [
          "message",
          "user"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserInfo"
          }
        },
        "example": {
          "message": "Login successful",
          "user": {
            "auth_provider": "email",
            "display_name": "John Doe",
            "email": "user@example.com",
            "id": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Logged out successfully"
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "email": "user@example.com",
          "password": "password123"
        }
      },
      "RegisterResponse": {
        "type": "object",
        "required": [
          "message",
          "user_id"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "message": "Registration successful. Please check your email for verification.",
          "user_id": "d290f1ee-6c54-4b01-90e6-d701748f0851"
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "required": [
          "token",
          "new_password"
        ],
        "properties": {
          "new_password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "example": {
          "new_password": "newpassword123",
          "token": "550e8400-e29b-41d4-a716-446655440000"
        }
      },
      "ResetPasswordResponse": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Password has been reset successfully"
        }
      },
      "UserInfo": {
        "type": "object",
        "required": [
          "id",
          "email",
          "auth_provider",
          "email_verified"
        ],
        "properties": {
          "auth_provider": {
            "$ref": "#/components/schemas/AuthProvider"
          },
          "avatar_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "display_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "email": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "last_login": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        }
      },
      "UserInfoResponse": {
        "type": "object",
        "required": [
          "id",
          "email"
        ],
        "properties": {
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "VideoGenerationRequest": {
        "type": "object",
        "required": [
          "clip",
          "audio_clip"
        ],
        "properties": {
          "audio_clip": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the audio clip to lip-sync with"
          },
          "clip": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the video clip to use as base"
          }
        },
        "example": {
          "audio_clip": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
          "clip": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        }
      },
      "VideoGenerationResponse": {
        "type": "object",
        "required": [
          "generation"
        ],
        "properties": {
          "generation": {
            "$ref": "#/components/schemas/Generation",
            "description": "The video generation metadata and status"
          },
          "video_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "Pre-signed S3 URL to access the generated video file (if available)"
          }
        },
        "example": {
          "generation": {
            "audio_clip_id": "12345678-90ab-cdef-1234-567890abcdef",
            "character_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
            "clip_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "created_at": "2024-01-01T00:00:00",
            "error": null,
            "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
            "prediction_id": "latentsync_pred_12345",
            "s3_key": "generations/video_123.mp4",
            "status": "completed",
            "updated_at": "2024-01-01T00:05:00"
          },
          "video_url": "https://celebrities-ai.s3.amazonaws.com/generations/video_123.mp4?presigned=true"
        }
      },
      "WebhookResponse": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message indicating webhook processing status"
          }
        },
        "example": {
          "message": "Webhook processed successfully"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Generation",
      "description": "Audio and video generation endpoints"
    },
    {
      "name": "Auth",
      "description": "Authentication and authorization endpoints"
    },
    {
      "name": "Webhook",
      "description": "Webhook endpoints for external service callbacks"
    },
    {
      "name": "Characters",
      "description": "Character and video clip management endpoints"
    }
  ]
}
