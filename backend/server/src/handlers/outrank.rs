#![allow(clippy::unused_async)]

use actix_web::{web, HttpRequest, HttpResponse, Result};
use serde::{Deserialize, Serialize};
use serde_json::Value as JsonValue;
use shared::errors::{ErrorResponse, ServiceError};
use shared::services::email::{EmailService, HtmlEmailContent};
use utoipa::ToSchema;

/// Outrank webhook payload
#[derive(Debug, Deserialize, ToSchema)]
#[schema(
    description = "Webhook payload from Outrank SEO service",
    example = json!({"eventType": "analysis_complete", "data": {"score": 85, "recommendations": ["Improve meta descriptions", "Add alt text to images"]}})
)]
pub struct OutrankWebhookPayload {
    /// Event type from Outrank
    #[serde(rename = "eventType")]
    #[schema(example = "analysis_complete")]
    pub event_type: Option<String>,
    /// Analysis data from Outrank
    #[schema(example = json!({
        "score": 85,
        "recommendations": [
            "Improve meta descriptions",
            "Add alt text to images"
        ]
    }))]
    pub data: Option<JsonValue>,
}

/// Outrank webhook response
#[derive(Debug, Serialize, ToSchema)]
#[schema(description = "Response confirming webhook processing")]
pub struct OutrankWebhookResponse {
    /// Success message
    #[schema(example = "Webhook processed successfully")]
    pub message: String,
}

/// Validate the Bearer token from Authorization header
fn validate_access_token(req: &HttpRequest, expected_token: &str) -> bool {
    if let Some(auth_header) = req.headers().get("authorization") {
        if let Ok(auth_str) = auth_header.to_str() {
            if let Some(token) = auth_str.strip_prefix("Bearer ") {
                return token == expected_token;
            }
        }
    }
    false
}

/// Process Outrank webhook
///
/// # Security
/// Validates Bearer token from Authorization header against `OUTRANK_ACCESS_TOKEN` environment variable
///
/// # Errors
/// Returns 401 if access token is invalid or missing, 500 for processing errors
#[utoipa::path(
    post,
    path = "/api/outrank/webhook",
    tag = "Outrank",
    request_body(
        content = OutrankWebhookPayload,
        description = "Webhook payload from Outrank",
        example = json!({"eventType": "analysis_complete", "data": {"score": 85, "recommendations": ["Improve meta descriptions", "Add alt text to images"]}})
    ),
    responses(
        (status = 200, description = "Webhook processed successfully", body = OutrankWebhookResponse),
        (status = 401, description = "Invalid or missing access token", body = ErrorResponse),
        (status = 500, description = "Server error processing webhook", body = ErrorResponse)
    ),
    security(("bearerAuth" = []))
)]
pub async fn process_webhook(
    req: HttpRequest,
    body: web::Json<OutrankWebhookPayload>,
    email_service: web::Data<EmailService>,
) -> Result<HttpResponse, actix_web::Error> {
    let expected_token = std::env::var("OUTRANK_ACCESS_TOKEN")
        .map_err(|_err| ServiceError::Config("OUTRANK_ACCESS_TOKEN not configured".to_owned()))?;

    if !validate_access_token(&req, &expected_token) {
        return Err(ServiceError::Forbidden("Invalid access token".to_owned()).into());
    }

    tracing::info!("Received Outrank webhook: {:?}", body);

    let event_type = body.event_type.as_deref().unwrap_or("unknown");
    let data_preview = body.data.as_ref().map_or_else(
        || "No data provided".to_owned(),
        |data| {
            serde_json::to_string_pretty(data)
                .unwrap_or_else(|_| "Failed to serialize data".to_owned())
        },
    );

    let html_body = format!(
        r#"
        <h2>Outrank Webhook Notification</h2>
        <p><strong>Event Type:</strong> {event_type}</p>
        <h3>Webhook Data:</h3>
        <pre style="background-color: #f4f4f4; padding: 10px; border-radius: 4px; overflow-x: auto;">{data_preview}</pre>
        <p><em>This notification was automatically generated by the Patron backend webhook handler.</em></p>
        "#
    );

    let text_body = format!(
        "Outrank Webhook Notification\n\nEvent Type: {event_type}\n\nWebhook Data:\n{data_preview}\n\nThis notification was automatically generated by the Patron backend webhook handler."
    );

    email_service
        .send_html_email(HtmlEmailContent {
            to: "me@skeptrune.com",
            subject: &format!("Outrank Webhook: {event_type}"),
            html_body: &html_body,
            text_body: Some(&text_body),
            from: None,
        })
        .await?;

    let response = OutrankWebhookResponse {
        message: "Webhook processed successfully".to_owned(),
    };

    Ok(HttpResponse::Ok().json(response))
}
